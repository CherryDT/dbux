// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`dbux-babel-plugin allFunctionTypes.es5.js: allFunctionTypes.es5.js 1`] = `
"
function f1() {

}

const f2 = function _f2() {

};

const f3 = () => {

};

const o = {
  f4() {},
  f5: () => {}
};

class C {
  constructor() {}
  f6() {}
  f7 = () => {};
}

// // generator function
// function *f8() {
//   yield 1;
//   yield 2;
// }

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _dbuxRuntime = require('dbux-runtime')[\\"default\\"];

var _dbux = _dbux_init(_dbuxRuntime);

var _contextId = _dbux.getProgramContextId();

try {
  var f1 = function f1() {
    var _contextId2 = _dbux.pushImmediate(2);

    try {} finally {
      _dbux.popImmediate(_contextId2);
    }
  };

  _dbux.t(1);

  _dbux.t(2);

  var f2 = (_dbux.t(3), _dbux.tv(3, function _f2() {
    var _contextId3 = _dbux.pushImmediate(3);

    try {} finally {
      _dbux.popImmediate(_contextId3);
    }
  }));

  _dbux.t(4);

  var f3 = (_dbux.t(5), _dbux.tv(5, function () {
    var _contextId4 = _dbux.pushImmediate(4);

    try {} finally {
      _dbux.popImmediate(_contextId4);
    }
  }));

  _dbux.t(6);

  var o = (_dbux.t(7), _dbux.tv(7, {
    f4: function f4() {
      var _contextId5 = _dbux.pushImmediate(5);

      try {} finally {
        _dbux.popImmediate(_contextId5);
      }
    },
    f5: function f5() {
      var _contextId6 = _dbux.pushImmediate(6);

      try {} finally {
        _dbux.popImmediate(_contextId6);
      }
    }
  }));

  _dbux.t(8);

  var C =
  /*#__PURE__*/
  function () {
    function C() {
      this.f7 = (_dbux.t(9), _dbux.tv(9, function () {
        var _contextId9 = _dbux.pushImmediate(9);

        try {} finally {
          _dbux.popImmediate(_contextId9);
        }
      }));

      var _contextId7 = _dbux.pushImmediate(7);

      try {} finally {
        _dbux.popImmediate(_contextId7);
      }
    }

    var _proto = C.prototype;

    _proto.f6 = function f6() {
      var _contextId8 = _dbux.pushImmediate(8);

      try {} finally {
        _dbux.popImmediate(_contextId8);
      }
    };

    return C;
  }(); // // generator function
  // function *f8() {
  //   yield 1;
  //   yield 2;
  // }

} finally {
  _dbux.popProgram();
}

function _dbux_init(dbuxRuntime) {
  return dbuxRuntime.initProgram({
    \\"fileName\\": \\"allFunctionTypes.js\\",
    \\"filePath\\": \\"/Users/domi/code/dbux/samples/__samplesInput__/allFunctionTypes.js\\",
    \\"staticContexts\\": [null, {
      \\"staticId\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 1,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 28,
          \\"column\\": 4
        }
      },
      \\"type\\": 1,
      \\"name\\": \\"Program\\",
      \\"displayName\\": \\"Program\\"
    }, {
      \\"staticId\\": 2,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 1,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 3,
          \\"column\\": 1
        }
      },
      \\"type\\": 2,
      \\"name\\": \\"f1\\",
      \\"displayName\\": \\"f1\\",
      \\"isInterruptable\\": false
    }, {
      \\"staticId\\": 3,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 5,
          \\"column\\": 11
        },
        \\"end\\": {
          \\"line\\": 7,
          \\"column\\": 1
        }
      },
      \\"type\\": 2,
      \\"name\\": \\"_f2\\",
      \\"displayName\\": \\"_f2\\",
      \\"isInterruptable\\": false
    }, {
      \\"staticId\\": 4,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 9,
          \\"column\\": 11
        },
        \\"end\\": {
          \\"line\\": 11,
          \\"column\\": 1
        }
      },
      \\"type\\": 2,
      \\"displayName\\": \\"(anonymous)\\",
      \\"isInterruptable\\": false
    }, {
      \\"staticId\\": 5,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 14,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 14,
          \\"column\\": 9
        }
      },
      \\"type\\": 2,
      \\"name\\": \\"f4\\",
      \\"displayName\\": \\"f4\\",
      \\"isInterruptable\\": false
    }, {
      \\"staticId\\": 6,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 15,
          \\"column\\": 6
        },
        \\"end\\": {
          \\"line\\": 15,
          \\"column\\": 14
        }
      },
      \\"type\\": 2,
      \\"name\\": \\"f5\\",
      \\"displayName\\": \\"f5\\",
      \\"isInterruptable\\": false
    }, {
      \\"staticId\\": 7,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 19,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 19,
          \\"column\\": 18
        }
      },
      \\"type\\": 2,
      \\"name\\": \\"constructor\\",
      \\"displayName\\": \\"C.constructor\\",
      \\"isInterruptable\\": false
    }, {
      \\"staticId\\": 8,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 20,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 20,
          \\"column\\": 9
        }
      },
      \\"type\\": 2,
      \\"name\\": \\"f6\\",
      \\"displayName\\": \\"C.f6\\",
      \\"isInterruptable\\": false
    }, {
      \\"staticId\\": 9,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 21,
          \\"column\\": 7
        },
        \\"end\\": {
          \\"line\\": 21,
          \\"column\\": 15
        }
      },
      \\"type\\": 2,
      \\"displayName\\": \\"(anonymous)\\",
      \\"isInterruptable\\": false
    }],
    \\"traces\\": [null, {
      \\"displayName\\": \\"function f1() {  const _co...\\",
      \\"traceId\\": 1,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 1,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 3,
          \\"column\\": 1
        }
      }
    }, {
      \\"displayName\\": \\"const f2 = function _f2() {};\\",
      \\"traceId\\": 2,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 5,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 7,
          \\"column\\": 2
        }
      }
    }, {
      \\"displayName\\": \\"function _f2() {}\\",
      \\"traceId\\": 3,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 5,
          \\"column\\": 11
        },
        \\"end\\": {
          \\"line\\": 7,
          \\"column\\": 1
        }
      }
    }, {
      \\"displayName\\": \\"const f3 = () => {};\\",
      \\"traceId\\": 4,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 9,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 11,
          \\"column\\": 2
        }
      }
    }, {
      \\"displayName\\": \\"() => {}\\",
      \\"traceId\\": 5,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 9,
          \\"column\\": 11
        },
        \\"end\\": {
          \\"line\\": 11,
          \\"column\\": 1
        }
      }
    }, {
      \\"displayName\\": \\"const o = {  f4() {},  f...\\",
      \\"traceId\\": 6,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 13,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 16,
          \\"column\\": 2
        }
      }
    }, {
      \\"displayName\\": \\"{  f4() {},  f5: () => {}}\\",
      \\"traceId\\": 7,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 13,
          \\"column\\": 10
        },
        \\"end\\": {
          \\"line\\": 16,
          \\"column\\": 1
        }
      }
    }, {
      \\"displayName\\": \\"class C {  constructor() {...\\",
      \\"traceId\\": 8,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 18,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 22,
          \\"column\\": 1
        }
      }
    }, {
      \\"displayName\\": \\"() => {}\\",
      \\"traceId\\": 9,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 21,
          \\"column\\": 7
        },
        \\"end\\": {
          \\"line\\": 21,
          \\"column\\": 15
        }
      }
    }]
  });
}
"
`;

exports[`dbux-babel-plugin allFunctionTypes.esNext.js: allFunctionTypes.esNext.js 1`] = `
"
function f1() {

}

const f2 = function _f2() {

};

const f3 = () => {

};

const o = {
  f4() {},
  f5: () => {}
};

class C {
  constructor() {}
  f6() {}
  f7 = () => {};
}

// // generator function
// function *f8() {
//   yield 1;
//   yield 2;
// }

      ↓ ↓ ↓ ↓ ↓ ↓

const _dbuxRuntime = require('dbux-runtime').default;

const _dbux = _dbux_init(_dbuxRuntime);

const _contextId = _dbux.getProgramContextId();

try {
  _dbux.t(1);

  function f1() {
    const _contextId2 = _dbux.pushImmediate(2);

    try {} finally {
      _dbux.popImmediate(_contextId2);
    }
  }

  _dbux.t(2);

  const f2 = (_dbux.t(3), _dbux.tv(3, function _f2() {
    const _contextId3 = _dbux.pushImmediate(3);

    try {} finally {
      _dbux.popImmediate(_contextId3);
    }
  }));

  _dbux.t(4);

  const f3 = (_dbux.t(5), _dbux.tv(5, () => {
    const _contextId4 = _dbux.pushImmediate(4);

    try {} finally {
      _dbux.popImmediate(_contextId4);
    }
  }));

  _dbux.t(6);

  const o = (_dbux.t(7), _dbux.tv(7, {
    f4() {
      const _contextId5 = _dbux.pushImmediate(5);

      try {} finally {
        _dbux.popImmediate(_contextId5);
      }
    },

    f5: () => {
      const _contextId6 = _dbux.pushImmediate(6);

      try {} finally {
        _dbux.popImmediate(_contextId6);
      }
    }
  }));

  _dbux.t(8);

  class C {
    constructor() {
      this.f7 = (_dbux.t(9), _dbux.tv(9, () => {
        const _contextId9 = _dbux.pushImmediate(9);

        try {} finally {
          _dbux.popImmediate(_contextId9);
        }
      }));

      const _contextId7 = _dbux.pushImmediate(7);

      try {} finally {
        _dbux.popImmediate(_contextId7);
      }
    }

    f6() {
      const _contextId8 = _dbux.pushImmediate(8);

      try {} finally {
        _dbux.popImmediate(_contextId8);
      }
    }

  } // // generator function
  // function *f8() {
  //   yield 1;
  //   yield 2;
  // }

} finally {
  _dbux.popProgram();
}

function _dbux_init(dbuxRuntime) {
  return dbuxRuntime.initProgram({
    \\"fileName\\": \\"allFunctionTypes.js\\",
    \\"filePath\\": \\"/Users/domi/code/dbux/samples/__samplesInput__/allFunctionTypes.js\\",
    \\"staticContexts\\": [null, {
      \\"staticId\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 1,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 28,
          \\"column\\": 4
        }
      },
      \\"type\\": 1,
      \\"name\\": \\"Program\\",
      \\"displayName\\": \\"Program\\"
    }, {
      \\"staticId\\": 2,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 1,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 3,
          \\"column\\": 1
        }
      },
      \\"type\\": 2,
      \\"name\\": \\"f1\\",
      \\"displayName\\": \\"f1\\",
      \\"isInterruptable\\": false
    }, {
      \\"staticId\\": 3,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 5,
          \\"column\\": 11
        },
        \\"end\\": {
          \\"line\\": 7,
          \\"column\\": 1
        }
      },
      \\"type\\": 2,
      \\"name\\": \\"_f2\\",
      \\"displayName\\": \\"_f2\\",
      \\"isInterruptable\\": false
    }, {
      \\"staticId\\": 4,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 9,
          \\"column\\": 11
        },
        \\"end\\": {
          \\"line\\": 11,
          \\"column\\": 1
        }
      },
      \\"type\\": 2,
      \\"displayName\\": \\"(anonymous)\\",
      \\"isInterruptable\\": false
    }, {
      \\"staticId\\": 5,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 14,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 14,
          \\"column\\": 9
        }
      },
      \\"type\\": 2,
      \\"name\\": \\"f4\\",
      \\"displayName\\": \\"f4\\",
      \\"isInterruptable\\": false
    }, {
      \\"staticId\\": 6,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 15,
          \\"column\\": 6
        },
        \\"end\\": {
          \\"line\\": 15,
          \\"column\\": 14
        }
      },
      \\"type\\": 2,
      \\"name\\": \\"f5\\",
      \\"displayName\\": \\"f5\\",
      \\"isInterruptable\\": false
    }, {
      \\"staticId\\": 7,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 19,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 19,
          \\"column\\": 18
        }
      },
      \\"type\\": 2,
      \\"name\\": \\"constructor\\",
      \\"displayName\\": \\"C.constructor\\",
      \\"isInterruptable\\": false
    }, {
      \\"staticId\\": 8,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 20,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 20,
          \\"column\\": 9
        }
      },
      \\"type\\": 2,
      \\"name\\": \\"f6\\",
      \\"displayName\\": \\"C.f6\\",
      \\"isInterruptable\\": false
    }, {
      \\"staticId\\": 9,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 21,
          \\"column\\": 7
        },
        \\"end\\": {
          \\"line\\": 21,
          \\"column\\": 15
        }
      },
      \\"type\\": 2,
      \\"displayName\\": \\"(anonymous)\\",
      \\"isInterruptable\\": false
    }],
    \\"traces\\": [null, {
      \\"displayName\\": \\"function f1() {  const _co...\\",
      \\"traceId\\": 1,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 1,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 3,
          \\"column\\": 1
        }
      }
    }, {
      \\"displayName\\": \\"const f2 = function _f2() {};\\",
      \\"traceId\\": 2,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 5,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 7,
          \\"column\\": 2
        }
      }
    }, {
      \\"displayName\\": \\"function _f2() {}\\",
      \\"traceId\\": 3,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 5,
          \\"column\\": 11
        },
        \\"end\\": {
          \\"line\\": 7,
          \\"column\\": 1
        }
      }
    }, {
      \\"displayName\\": \\"const f3 = () => {};\\",
      \\"traceId\\": 4,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 9,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 11,
          \\"column\\": 2
        }
      }
    }, {
      \\"displayName\\": \\"() => {}\\",
      \\"traceId\\": 5,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 9,
          \\"column\\": 11
        },
        \\"end\\": {
          \\"line\\": 11,
          \\"column\\": 1
        }
      }
    }, {
      \\"displayName\\": \\"const o = {  f4() {},  f...\\",
      \\"traceId\\": 6,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 13,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 16,
          \\"column\\": 2
        }
      }
    }, {
      \\"displayName\\": \\"{  f4() {},  f5: () => {}}\\",
      \\"traceId\\": 7,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 13,
          \\"column\\": 10
        },
        \\"end\\": {
          \\"line\\": 16,
          \\"column\\": 1
        }
      }
    }, {
      \\"displayName\\": \\"class C {  constructor() {...\\",
      \\"traceId\\": 8,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 18,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 22,
          \\"column\\": 1
        }
      }
    }, {
      \\"displayName\\": \\"() => {}\\",
      \\"traceId\\": 9,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 21,
          \\"column\\": 7
        },
        \\"end\\": {
          \\"line\\": 21,
          \\"column\\": 15
        }
      }
    }]
  });
}
"
`;

exports[`dbux-babel-plugin async-example1.es5.js: async-example1.es5.js 1`] = `
"
function f0() {  
}

async function af1(a) {
  return Promise.resolve(a);
}

async function af2() {
  await af1(1);
  await af1(2);

  return 2 + await af1(3) - 3;
}

async function af33(delay) {
  return new Promise(r => {
    setTimeout(r.bind(33), delay);
  });
}

async function af44() {
  const a = await af33(100);
  const b = await af33(50);

  return a+b + af33(10);
}

(async function main() {
  console.log(
    await Promise.all([
      af2(),
      af44()
    ])
  );

  f0();
})();

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

require(\\"core-js/modules/es.array.iterator\\");

require(\\"core-js/modules/es.function.bind\\");

require(\\"core-js/modules/es.object.to-string\\");

require(\\"core-js/modules/es.promise\\");

require(\\"core-js/modules/es.string.iterator\\");

require(\\"core-js/modules/web.dom-collections.iterator\\");

require(\\"core-js/modules/web.timers\\");

require(\\"regenerator-runtime/runtime\\");

var _dbuxRuntime = require('dbux-runtime')[\\"default\\"];

var _dbux = _dbux_init(_dbuxRuntime);

var _contextId = _dbux.getProgramContextId();

try {
  var f0 = function f0() {
    var _contextId2 = _dbux.pushImmediate(2);

    try {} finally {
      _dbux.popImmediate(_contextId2);
    }
  };

  var af1 = function af1(a) {
    var _contextId3;

    return regeneratorRuntime.async(function af1$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _contextId3 = _dbux.pushImmediate(3);

            _dbux.pushResume(4, 3);

            _context.prev = 2;

            _dbux.t(3);

            return _context.abrupt(\\"return\\", (_dbux.t(4), _dbux.tv(4, Promise.resolve(a))));

          case 5:
            _context.prev = 5;

            _dbux.popResume();

            _dbux.popImmediate(_contextId3);

            return _context.finish(5);

          case 9:
          case \\"end\\":
            return _context.stop();
        }
      }
    }, null, null, [[2,, 5, 9]]);
  };

  var af2 = function af2() {
    var _contextId4, _contextId5, _contextId6, _contextId7;

    return regeneratorRuntime.async(function af2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _contextId4 = _dbux.pushImmediate(5);

            _dbux.pushResume(6, 5);

            _context2.prev = 2;

            _dbux.t(6);

            _context2.t0 = _dbux;
            _context2.t1 = _dbux;
            _context2.next = 8;
            return regeneratorRuntime.awrap(_dbux.wrapAwait(_contextId5 = _dbux.preAwait(8), (_dbux.t(7), _dbux.tv(7, af1(1)))));

          case 8:
            _context2.t2 = _context2.sent;
            _context2.t3 = _contextId5;
            _context2.t4 = _context2.t1.postAwait.call(_context2.t1, _context2.t2, _context2.t3);

            _context2.t0.tv.call(_context2.t0, 6, _context2.t4);

            _dbux.t(8);

            _context2.t5 = _dbux;
            _context2.t6 = _dbux;
            _context2.next = 17;
            return regeneratorRuntime.awrap(_dbux.wrapAwait(_contextId6 = _dbux.preAwait(10), (_dbux.t(9), _dbux.tv(9, af1(2)))));

          case 17:
            _context2.t7 = _context2.sent;
            _context2.t8 = _contextId6;
            _context2.t9 = _context2.t6.postAwait.call(_context2.t6, _context2.t7, _context2.t8);

            _context2.t5.tv.call(_context2.t5, 8, _context2.t9);

            _dbux.t(10);

            _dbux.t(11);

            _context2.t10 = _dbux;
            _context2.t11 = _dbux;
            _context2.next = 27;
            return regeneratorRuntime.awrap(_dbux.wrapAwait(_contextId7 = _dbux.preAwait(12), (_dbux.t(12), _dbux.tv(12, af1(3)))));

          case 27:
            _context2.t12 = _context2.sent;
            _context2.t13 = _contextId7;
            _context2.t14 = _context2.t11.postAwait.call(_context2.t11, _context2.t12, _context2.t13);
            _context2.t15 = _context2.t10.tv.call(_context2.t10, 11, _context2.t14);
            _context2.t16 = 2 + _context2.t15;
            return _context2.abrupt(\\"return\\", _context2.t16 - 3);

          case 33:
            _context2.prev = 33;

            _dbux.popResume();

            _dbux.popImmediate(_contextId4);

            return _context2.finish(33);

          case 37:
          case \\"end\\":
            return _context2.stop();
        }
      }
    }, null, null, [[2,, 33, 37]]);
  };

  var af33 = function af33(delay) {
    var _contextId8;

    return regeneratorRuntime.async(function af33$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _contextId8 = _dbux.pushImmediate(13);

            _dbux.pushResume(14, 13);

            _context3.prev = 2;

            _dbux.t(14);

            return _context3.abrupt(\\"return\\", new Promise(function (r) {
              var _contextId9 = _dbux.pushImmediate(15);

              try {
                _dbux.t(15), _dbux.tv(15, setTimeout(_dbux.scheduleCallback(16, _contextId9, (_dbux.t(16), _dbux.tv(16, r.bind(33)))), delay));
              } finally {
                _dbux.popImmediate(_contextId9);
              }
            }));

          case 5:
            _context3.prev = 5;

            _dbux.popResume();

            _dbux.popImmediate(_contextId8);

            return _context3.finish(5);

          case 9:
          case \\"end\\":
            return _context3.stop();
        }
      }
    }, null, null, [[2,, 5, 9]]);
  };

  var af44 = function af44() {
    var _contextId10, _contextId11, _contextId12, a, b;

    return regeneratorRuntime.async(function af44$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _contextId10 = _dbux.pushImmediate(17);

            _dbux.pushResume(18, 17);

            _context4.prev = 2;

            _dbux.t(18);

            _dbux.t(19);

            _context4.t0 = _dbux;
            _context4.t1 = _dbux;
            _context4.next = 9;
            return regeneratorRuntime.awrap(_dbux.wrapAwait(_contextId11 = _dbux.preAwait(20), (_dbux.t(20), _dbux.tv(20, af33(100)))));

          case 9:
            _context4.t2 = _context4.sent;
            _context4.t3 = _contextId11;
            _context4.t4 = _context4.t1.postAwait.call(_context4.t1, _context4.t2, _context4.t3);
            a = _context4.t0.tv.call(_context4.t0, 19, _context4.t4);

            _dbux.t(21);

            _dbux.t(22);

            _context4.t5 = _dbux;
            _context4.t6 = _dbux;
            _context4.next = 19;
            return regeneratorRuntime.awrap(_dbux.wrapAwait(_contextId12 = _dbux.preAwait(22), (_dbux.t(23), _dbux.tv(23, af33(50)))));

          case 19:
            _context4.t7 = _context4.sent;
            _context4.t8 = _contextId12;
            _context4.t9 = _context4.t6.postAwait.call(_context4.t6, _context4.t7, _context4.t8);
            b = _context4.t5.tv.call(_context4.t5, 22, _context4.t9);

            _dbux.t(24);

            return _context4.abrupt(\\"return\\", a + b + (_dbux.t(25), _dbux.tv(25, af33(10))));

          case 25:
            _context4.prev = 25;

            _dbux.popResume();

            _dbux.popImmediate(_contextId10);

            return _context4.finish(25);

          case 29:
          case \\"end\\":
            return _context4.stop();
        }
      }
    }, null, null, [[2,, 25, 29]]);
  };

  _dbux.t(1);

  _dbux.t(2);

  _dbux.t(5);

  _dbux.t(13);

  _dbux.t(17);

  _dbux.t(26), _dbux.tv(26, function main() {
    var _contextId13, _contextId14;

    return regeneratorRuntime.async(function main$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _contextId13 = _dbux.pushImmediate(23);

            _dbux.pushResume(24, 23);

            _context5.prev = 2;

            _dbux.t(27);

            _context5.t0 = _dbux;
            _context5.t1 = console;

            _dbux.t(28);

            _context5.t2 = _dbux;
            _context5.t3 = _dbux;
            _context5.next = 11;
            return regeneratorRuntime.awrap(_dbux.wrapAwait(_contextId14 = _dbux.preAwait(26), (_dbux.t(29), _dbux.tv(29, Promise.all([(_dbux.t(30), _dbux.tv(30, af2())), (_dbux.t(31), _dbux.tv(31, af44()))])))));

          case 11:
            _context5.t4 = _context5.sent;
            _context5.t5 = _contextId14;
            _context5.t6 = _context5.t3.postAwait.call(_context5.t3, _context5.t4, _context5.t5);
            _context5.t7 = _context5.t2.tv.call(_context5.t2, 28, _context5.t6);
            _context5.t8 = _context5.t1.log.call(_context5.t1, _context5.t7);

            _context5.t0.tv.call(_context5.t0, 27, _context5.t8);

            _dbux.t(32), _dbux.tv(32, f0());

          case 18:
            _context5.prev = 18;

            _dbux.popResume();

            _dbux.popImmediate(_contextId13);

            return _context5.finish(18);

          case 22:
          case \\"end\\":
            return _context5.stop();
        }
      }
    }, null, null, [[2,, 18, 22]]);
  }());
} finally {
  _dbux.popProgram();
}

function _dbux_init(dbuxRuntime) {
  return dbuxRuntime.initProgram({
    \\"fileName\\": \\"async-example1.js\\",
    \\"filePath\\": \\"/Users/domi/code/dbux/samples/__samplesInput__/async-example1.js\\",
    \\"staticContexts\\": [null, {
      \\"staticId\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 1,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 37,
          \\"column\\": 5
        }
      },
      \\"type\\": 1,
      \\"name\\": \\"Program\\",
      \\"displayName\\": \\"Program\\"
    }, {
      \\"staticId\\": 2,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 1,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 2,
          \\"column\\": 1
        }
      },
      \\"type\\": 2,
      \\"name\\": \\"f0\\",
      \\"displayName\\": \\"f0\\",
      \\"isInterruptable\\": false
    }, {
      \\"staticId\\": 3,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 4,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 6,
          \\"column\\": 1
        }
      },
      \\"type\\": 2,
      \\"name\\": \\"af1\\",
      \\"displayName\\": \\"af1\\",
      \\"isInterruptable\\": true
    }, {
      \\"type\\": 5,
      \\"staticId\\": 4,
      \\"parent\\": 3,
      \\"displayName\\": \\"af1\\",
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 4,
          \\"column\\": 22
        },
        \\"end\\": null
      }
    }, {
      \\"staticId\\": 5,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 8,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 13,
          \\"column\\": 1
        }
      },
      \\"type\\": 2,
      \\"name\\": \\"af2\\",
      \\"displayName\\": \\"af2\\",
      \\"isInterruptable\\": true
    }, {
      \\"type\\": 5,
      \\"staticId\\": 6,
      \\"parent\\": 5,
      \\"displayName\\": \\"af2\\",
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 8,
          \\"column\\": 21
        },
        \\"end\\": null
      }
    }, {
      \\"type\\": 5,
      \\"staticId\\": 7,
      \\"parent\\": 5,
      \\"displayName\\": \\"af2\\",
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 9,
          \\"column\\": 14
        },
        \\"end\\": null
      }
    }, {
      \\"staticId\\": 8,
      \\"parent\\": 5,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 9,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 9,
          \\"column\\": 14
        }
      },
      \\"type\\": 4,
      \\"displayName\\": \\"(await af1(1))\\",
      \\"resumeId\\": 7
    }, {
      \\"type\\": 5,
      \\"staticId\\": 9,
      \\"parent\\": 5,
      \\"displayName\\": \\"af2\\",
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 10,
          \\"column\\": 14
        },
        \\"end\\": null
      }
    }, {
      \\"staticId\\": 10,
      \\"parent\\": 5,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 10,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 10,
          \\"column\\": 14
        }
      },
      \\"type\\": 4,
      \\"displayName\\": \\"(await af1(2))\\",
      \\"resumeId\\": 9
    }, {
      \\"type\\": 5,
      \\"staticId\\": 11,
      \\"parent\\": 5,
      \\"displayName\\": \\"af2\\",
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 12,
          \\"column\\": 25
        },
        \\"end\\": null
      }
    }, {
      \\"staticId\\": 12,
      \\"parent\\": 5,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 12,
          \\"column\\": 13
        },
        \\"end\\": {
          \\"line\\": 12,
          \\"column\\": 25
        }
      },
      \\"type\\": 4,
      \\"displayName\\": \\"(await af1(3))\\",
      \\"resumeId\\": 11
    }, {
      \\"staticId\\": 13,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 15,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 19,
          \\"column\\": 1
        }
      },
      \\"type\\": 2,
      \\"name\\": \\"af33\\",
      \\"displayName\\": \\"af33\\",
      \\"isInterruptable\\": true
    }, {
      \\"type\\": 5,
      \\"staticId\\": 14,
      \\"parent\\": 13,
      \\"displayName\\": \\"af33\\",
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 15,
          \\"column\\": 27
        },
        \\"end\\": null
      }
    }, {
      \\"staticId\\": 15,
      \\"parent\\": 13,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 16,
          \\"column\\": 21
        },
        \\"end\\": {
          \\"line\\": 18,
          \\"column\\": 3
        }
      },
      \\"type\\": 2,
      \\"displayName\\": \\"(anonymous)\\",
      \\"isInterruptable\\": false
    }, {
      \\"staticId\\": 16,
      \\"parent\\": 15,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 17,
          \\"column\\": 15
        },
        \\"end\\": {
          \\"line\\": 17,
          \\"column\\": 25
        }
      },
      \\"type\\": 3,
      \\"displayName\\": \\"(r.bind(33))\\"
    }, {
      \\"staticId\\": 17,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 21,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 26,
          \\"column\\": 1
        }
      },
      \\"type\\": 2,
      \\"name\\": \\"af44\\",
      \\"displayName\\": \\"af44\\",
      \\"isInterruptable\\": true
    }, {
      \\"type\\": 5,
      \\"staticId\\": 18,
      \\"parent\\": 17,
      \\"displayName\\": \\"af44\\",
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 21,
          \\"column\\": 22
        },
        \\"end\\": null
      }
    }, {
      \\"type\\": 5,
      \\"staticId\\": 19,
      \\"parent\\": 17,
      \\"displayName\\": \\"af44\\",
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 22,
          \\"column\\": 27
        },
        \\"end\\": null
      }
    }, {
      \\"staticId\\": 20,
      \\"parent\\": 17,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 22,
          \\"column\\": 12
        },
        \\"end\\": {
          \\"line\\": 22,
          \\"column\\": 27
        }
      },
      \\"type\\": 4,
      \\"displayName\\": \\"(await af33(100))\\",
      \\"resumeId\\": 19
    }, {
      \\"type\\": 5,
      \\"staticId\\": 21,
      \\"parent\\": 17,
      \\"displayName\\": \\"af44\\",
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 23,
          \\"column\\": 26
        },
        \\"end\\": null
      }
    }, {
      \\"staticId\\": 22,
      \\"parent\\": 17,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 23,
          \\"column\\": 12
        },
        \\"end\\": {
          \\"line\\": 23,
          \\"column\\": 26
        }
      },
      \\"type\\": 4,
      \\"displayName\\": \\"(await af33(50))\\",
      \\"resumeId\\": 21
    }, {
      \\"staticId\\": 23,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 28,
          \\"column\\": 1
        },
        \\"end\\": {
          \\"line\\": 37,
          \\"column\\": 1
        }
      },
      \\"type\\": 2,
      \\"name\\": \\"main\\",
      \\"displayName\\": \\"main\\",
      \\"isInterruptable\\": true
    }, {
      \\"type\\": 5,
      \\"staticId\\": 24,
      \\"parent\\": 23,
      \\"displayName\\": \\"main\\",
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 28,
          \\"column\\": 23
        },
        \\"end\\": null
      }
    }, {
      \\"type\\": 5,
      \\"staticId\\": 25,
      \\"parent\\": 23,
      \\"displayName\\": \\"main\\",
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 33,
          \\"column\\": 6
        },
        \\"end\\": null
      }
    }, {
      \\"staticId\\": 26,
      \\"parent\\": 23,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 30,
          \\"column\\": 4
        },
        \\"end\\": {
          \\"line\\": 33,
          \\"column\\": 6
        }
      },
      \\"type\\": 4,
      \\"displayName\\": \\"(await Promise.all([af2(), a...)\\",
      \\"resumeId\\": 25
    }],
    \\"traces\\": [null, {
      \\"displayName\\": \\"function f0() {  const _co...\\",
      \\"traceId\\": 1,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 1,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 2,
          \\"column\\": 1
        }
      }
    }, {
      \\"displayName\\": \\"async function af1(a) {  c...\\",
      \\"traceId\\": 2,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 4,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 6,
          \\"column\\": 1
        }
      }
    }, {
      \\"displayName\\": \\"return Promise.resolve(a);\\",
      \\"traceId\\": 3,
      \\"parent\\": 3,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 5,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 5,
          \\"column\\": 28
        }
      }
    }, {
      \\"displayName\\": \\"Promise.resolve(a)\\",
      \\"traceId\\": 4,
      \\"parent\\": 3,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 5,
          \\"column\\": 9
        },
        \\"end\\": {
          \\"line\\": 5,
          \\"column\\": 27
        }
      }
    }, {
      \\"displayName\\": \\"async function af2() {  co...\\",
      \\"traceId\\": 5,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 8,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 13,
          \\"column\\": 1
        }
      }
    }, {
      \\"displayName\\": \\"await af1(1)\\",
      \\"traceId\\": 6,
      \\"parent\\": 5,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 9,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 9,
          \\"column\\": 14
        }
      }
    }, {
      \\"displayName\\": \\"af1(1)\\",
      \\"traceId\\": 7,
      \\"parent\\": 8,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 9,
          \\"column\\": 8
        },
        \\"end\\": {
          \\"line\\": 9,
          \\"column\\": 14
        }
      }
    }, {
      \\"displayName\\": \\"await af1(2)\\",
      \\"traceId\\": 8,
      \\"parent\\": 5,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 10,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 10,
          \\"column\\": 14
        }
      }
    }, {
      \\"displayName\\": \\"af1(2)\\",
      \\"traceId\\": 9,
      \\"parent\\": 10,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 10,
          \\"column\\": 8
        },
        \\"end\\": {
          \\"line\\": 10,
          \\"column\\": 14
        }
      }
    }, {
      \\"displayName\\": \\"return 2 + (await af1(3)) - 3;\\",
      \\"traceId\\": 10,
      \\"parent\\": 5,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 12,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 12,
          \\"column\\": 30
        }
      }
    }, {
      \\"displayName\\": \\"await af1(3)\\",
      \\"traceId\\": 11,
      \\"parent\\": 5,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 12,
          \\"column\\": 13
        },
        \\"end\\": {
          \\"line\\": 12,
          \\"column\\": 25
        }
      }
    }, {
      \\"displayName\\": \\"af1(3)\\",
      \\"traceId\\": 12,
      \\"parent\\": 12,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 12,
          \\"column\\": 19
        },
        \\"end\\": {
          \\"line\\": 12,
          \\"column\\": 25
        }
      }
    }, {
      \\"displayName\\": \\"async function af33(delay)...\\",
      \\"traceId\\": 13,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 15,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 19,
          \\"column\\": 1
        }
      }
    }, {
      \\"displayName\\": \\"return new Promise(r => {...\\",
      \\"traceId\\": 14,
      \\"parent\\": 13,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 16,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 18,
          \\"column\\": 5
        }
      }
    }, {
      \\"displayName\\": \\"setTimeout(r.bind(33), delay)\\",
      \\"traceId\\": 15,
      \\"parent\\": 15,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 17,
          \\"column\\": 4
        },
        \\"end\\": {
          \\"line\\": 17,
          \\"column\\": 33
        }
      }
    }, {
      \\"displayName\\": \\"r.bind(33)\\",
      \\"traceId\\": 16,
      \\"parent\\": 16,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 17,
          \\"column\\": 15
        },
        \\"end\\": {
          \\"line\\": 17,
          \\"column\\": 25
        }
      }
    }, {
      \\"displayName\\": \\"async function af44() {  c...\\",
      \\"traceId\\": 17,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 21,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 26,
          \\"column\\": 1
        }
      }
    }, {
      \\"displayName\\": \\"const a = await af33(100);\\",
      \\"traceId\\": 18,
      \\"parent\\": 17,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 22,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 22,
          \\"column\\": 28
        }
      }
    }, {
      \\"displayName\\": \\"await af33(100)\\",
      \\"traceId\\": 19,
      \\"parent\\": 17,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 22,
          \\"column\\": 12
        },
        \\"end\\": {
          \\"line\\": 22,
          \\"column\\": 27
        }
      }
    }, {
      \\"displayName\\": \\"af33(100)\\",
      \\"traceId\\": 20,
      \\"parent\\": 20,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 22,
          \\"column\\": 18
        },
        \\"end\\": {
          \\"line\\": 22,
          \\"column\\": 27
        }
      }
    }, {
      \\"displayName\\": \\"const b = await af33(50);\\",
      \\"traceId\\": 21,
      \\"parent\\": 17,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 23,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 23,
          \\"column\\": 27
        }
      }
    }, {
      \\"displayName\\": \\"await af33(50)\\",
      \\"traceId\\": 22,
      \\"parent\\": 17,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 23,
          \\"column\\": 12
        },
        \\"end\\": {
          \\"line\\": 23,
          \\"column\\": 26
        }
      }
    }, {
      \\"displayName\\": \\"af33(50)\\",
      \\"traceId\\": 23,
      \\"parent\\": 22,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 23,
          \\"column\\": 18
        },
        \\"end\\": {
          \\"line\\": 23,
          \\"column\\": 26
        }
      }
    }, {
      \\"displayName\\": \\"return a + b + af33(10);\\",
      \\"traceId\\": 24,
      \\"parent\\": 17,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 25,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 25,
          \\"column\\": 24
        }
      }
    }, {
      \\"displayName\\": \\"af33(10)\\",
      \\"traceId\\": 25,
      \\"parent\\": 17,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 25,
          \\"column\\": 15
        },
        \\"end\\": {
          \\"line\\": 25,
          \\"column\\": 23
        }
      }
    }, {
      \\"displayName\\": \\"async function main() {  c...\\",
      \\"traceId\\": 26,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 28,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 37,
          \\"column\\": 4
        }
      }
    }, {
      \\"displayName\\": \\"console.log((await Promise....\\",
      \\"traceId\\": 27,
      \\"parent\\": 23,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 29,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 34,
          \\"column\\": 3
        }
      }
    }, {
      \\"displayName\\": \\"await Promise.all([af2(), a...\\",
      \\"traceId\\": 28,
      \\"parent\\": 23,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 30,
          \\"column\\": 4
        },
        \\"end\\": {
          \\"line\\": 33,
          \\"column\\": 6
        }
      }
    }, {
      \\"displayName\\": \\"Promise.all([af2(), af44()])\\",
      \\"traceId\\": 29,
      \\"parent\\": 26,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 30,
          \\"column\\": 10
        },
        \\"end\\": {
          \\"line\\": 33,
          \\"column\\": 6
        }
      }
    }, {
      \\"displayName\\": \\"af2()\\",
      \\"traceId\\": 30,
      \\"parent\\": 26,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 31,
          \\"column\\": 6
        },
        \\"end\\": {
          \\"line\\": 31,
          \\"column\\": 11
        }
      }
    }, {
      \\"displayName\\": \\"af44()\\",
      \\"traceId\\": 31,
      \\"parent\\": 26,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 32,
          \\"column\\": 6
        },
        \\"end\\": {
          \\"line\\": 32,
          \\"column\\": 12
        }
      }
    }, {
      \\"displayName\\": \\"f0()\\",
      \\"traceId\\": 32,
      \\"parent\\": 23,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 36,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 36,
          \\"column\\": 6
        }
      }
    }]
  });
}
"
`;

exports[`dbux-babel-plugin async-example1.esNext.js: async-example1.esNext.js 1`] = `
"
function f0() {  
}

async function af1(a) {
  return Promise.resolve(a);
}

async function af2() {
  await af1(1);
  await af1(2);

  return 2 + await af1(3) - 3;
}

async function af33(delay) {
  return new Promise(r => {
    setTimeout(r.bind(33), delay);
  });
}

async function af44() {
  const a = await af33(100);
  const b = await af33(50);

  return a+b + af33(10);
}

(async function main() {
  console.log(
    await Promise.all([
      af2(),
      af44()
    ])
  );

  f0();
})();

      ↓ ↓ ↓ ↓ ↓ ↓

const _dbuxRuntime = require('dbux-runtime').default;

const _dbux = _dbux_init(_dbuxRuntime);

const _contextId = _dbux.getProgramContextId();

try {
  _dbux.t(1);

  function f0() {
    const _contextId2 = _dbux.pushImmediate(2);

    try {} finally {
      _dbux.popImmediate(_contextId2);
    }
  }

  _dbux.t(2);

  async function af1(a) {
    const _contextId3 = _dbux.pushImmediate(3);

    _dbux.pushResume(4, 3);

    try {
      _dbux.t(3);

      return _dbux.t(4), _dbux.tv(4, Promise.resolve(a));
    } finally {
      _dbux.popResume();

      _dbux.popImmediate(_contextId3);
    }
  }

  _dbux.t(5);

  async function af2() {
    const _contextId4 = _dbux.pushImmediate(5);

    _dbux.pushResume(6, 5);

    try {
      var _contextId5, _contextId6, _contextId7;

      _dbux.t(6), _dbux.tv(6, _dbux.postAwait((await _dbux.wrapAwait(_contextId5 = _dbux.preAwait(8), (_dbux.t(7), _dbux.tv(7, af1(1))))), _contextId5));
      _dbux.t(8), _dbux.tv(8, _dbux.postAwait((await _dbux.wrapAwait(_contextId6 = _dbux.preAwait(10), (_dbux.t(9), _dbux.tv(9, af1(2))))), _contextId6));

      _dbux.t(10);

      return 2 + (_dbux.t(11), _dbux.tv(11, _dbux.postAwait((await _dbux.wrapAwait(_contextId7 = _dbux.preAwait(12), (_dbux.t(12), _dbux.tv(12, af1(3))))), _contextId7))) - 3;
    } finally {
      _dbux.popResume();

      _dbux.popImmediate(_contextId4);
    }
  }

  _dbux.t(13);

  async function af33(delay) {
    const _contextId8 = _dbux.pushImmediate(13);

    _dbux.pushResume(14, 13);

    try {
      _dbux.t(14);

      return new Promise(r => {
        const _contextId9 = _dbux.pushImmediate(15);

        try {
          _dbux.t(15), _dbux.tv(15, setTimeout(_dbux.scheduleCallback(16, _contextId9, (_dbux.t(16), _dbux.tv(16, r.bind(33)))), delay));
        } finally {
          _dbux.popImmediate(_contextId9);
        }
      });
    } finally {
      _dbux.popResume();

      _dbux.popImmediate(_contextId8);
    }
  }

  _dbux.t(17);

  async function af44() {
    const _contextId10 = _dbux.pushImmediate(17);

    _dbux.pushResume(18, 17);

    try {
      var _contextId11, _contextId12;

      _dbux.t(18);

      const a = (_dbux.t(19), _dbux.tv(19, _dbux.postAwait((await _dbux.wrapAwait(_contextId11 = _dbux.preAwait(20), (_dbux.t(20), _dbux.tv(20, af33(100))))), _contextId11)));

      _dbux.t(21);

      const b = (_dbux.t(22), _dbux.tv(22, _dbux.postAwait((await _dbux.wrapAwait(_contextId12 = _dbux.preAwait(22), (_dbux.t(23), _dbux.tv(23, af33(50))))), _contextId12)));

      _dbux.t(24);

      return a + b + (_dbux.t(25), _dbux.tv(25, af33(10)));
    } finally {
      _dbux.popResume();

      _dbux.popImmediate(_contextId10);
    }
  }

  _dbux.t(26), _dbux.tv(26, async function main() {
    const _contextId13 = _dbux.pushImmediate(23);

    _dbux.pushResume(24, 23);

    try {
      var _contextId14;

      _dbux.t(27), _dbux.tv(27, console.log((_dbux.t(28), _dbux.tv(28, _dbux.postAwait((await _dbux.wrapAwait(_contextId14 = _dbux.preAwait(26), (_dbux.t(29), _dbux.tv(29, Promise.all([(_dbux.t(30), _dbux.tv(30, af2())), (_dbux.t(31), _dbux.tv(31, af44()))]))))), _contextId14)))));
      _dbux.t(32), _dbux.tv(32, f0());
    } finally {
      _dbux.popResume();

      _dbux.popImmediate(_contextId13);
    }
  }());
} finally {
  _dbux.popProgram();
}

function _dbux_init(dbuxRuntime) {
  return dbuxRuntime.initProgram({
    \\"fileName\\": \\"async-example1.js\\",
    \\"filePath\\": \\"/Users/domi/code/dbux/samples/__samplesInput__/async-example1.js\\",
    \\"staticContexts\\": [null, {
      \\"staticId\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 1,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 37,
          \\"column\\": 5
        }
      },
      \\"type\\": 1,
      \\"name\\": \\"Program\\",
      \\"displayName\\": \\"Program\\"
    }, {
      \\"staticId\\": 2,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 1,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 2,
          \\"column\\": 1
        }
      },
      \\"type\\": 2,
      \\"name\\": \\"f0\\",
      \\"displayName\\": \\"f0\\",
      \\"isInterruptable\\": false
    }, {
      \\"staticId\\": 3,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 4,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 6,
          \\"column\\": 1
        }
      },
      \\"type\\": 2,
      \\"name\\": \\"af1\\",
      \\"displayName\\": \\"af1\\",
      \\"isInterruptable\\": true
    }, {
      \\"type\\": 5,
      \\"staticId\\": 4,
      \\"parent\\": 3,
      \\"displayName\\": \\"af1\\",
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 4,
          \\"column\\": 22
        },
        \\"end\\": null
      }
    }, {
      \\"staticId\\": 5,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 8,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 13,
          \\"column\\": 1
        }
      },
      \\"type\\": 2,
      \\"name\\": \\"af2\\",
      \\"displayName\\": \\"af2\\",
      \\"isInterruptable\\": true
    }, {
      \\"type\\": 5,
      \\"staticId\\": 6,
      \\"parent\\": 5,
      \\"displayName\\": \\"af2\\",
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 8,
          \\"column\\": 21
        },
        \\"end\\": null
      }
    }, {
      \\"type\\": 5,
      \\"staticId\\": 7,
      \\"parent\\": 5,
      \\"displayName\\": \\"af2\\",
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 9,
          \\"column\\": 14
        },
        \\"end\\": null
      }
    }, {
      \\"staticId\\": 8,
      \\"parent\\": 5,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 9,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 9,
          \\"column\\": 14
        }
      },
      \\"type\\": 4,
      \\"displayName\\": \\"(await af1(1))\\",
      \\"resumeId\\": 7
    }, {
      \\"type\\": 5,
      \\"staticId\\": 9,
      \\"parent\\": 5,
      \\"displayName\\": \\"af2\\",
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 10,
          \\"column\\": 14
        },
        \\"end\\": null
      }
    }, {
      \\"staticId\\": 10,
      \\"parent\\": 5,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 10,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 10,
          \\"column\\": 14
        }
      },
      \\"type\\": 4,
      \\"displayName\\": \\"(await af1(2))\\",
      \\"resumeId\\": 9
    }, {
      \\"type\\": 5,
      \\"staticId\\": 11,
      \\"parent\\": 5,
      \\"displayName\\": \\"af2\\",
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 12,
          \\"column\\": 25
        },
        \\"end\\": null
      }
    }, {
      \\"staticId\\": 12,
      \\"parent\\": 5,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 12,
          \\"column\\": 13
        },
        \\"end\\": {
          \\"line\\": 12,
          \\"column\\": 25
        }
      },
      \\"type\\": 4,
      \\"displayName\\": \\"(await af1(3))\\",
      \\"resumeId\\": 11
    }, {
      \\"staticId\\": 13,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 15,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 19,
          \\"column\\": 1
        }
      },
      \\"type\\": 2,
      \\"name\\": \\"af33\\",
      \\"displayName\\": \\"af33\\",
      \\"isInterruptable\\": true
    }, {
      \\"type\\": 5,
      \\"staticId\\": 14,
      \\"parent\\": 13,
      \\"displayName\\": \\"af33\\",
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 15,
          \\"column\\": 27
        },
        \\"end\\": null
      }
    }, {
      \\"staticId\\": 15,
      \\"parent\\": 13,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 16,
          \\"column\\": 21
        },
        \\"end\\": {
          \\"line\\": 18,
          \\"column\\": 3
        }
      },
      \\"type\\": 2,
      \\"displayName\\": \\"(anonymous)\\",
      \\"isInterruptable\\": false
    }, {
      \\"staticId\\": 16,
      \\"parent\\": 15,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 17,
          \\"column\\": 15
        },
        \\"end\\": {
          \\"line\\": 17,
          \\"column\\": 25
        }
      },
      \\"type\\": 3,
      \\"displayName\\": \\"(r.bind(33))\\"
    }, {
      \\"staticId\\": 17,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 21,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 26,
          \\"column\\": 1
        }
      },
      \\"type\\": 2,
      \\"name\\": \\"af44\\",
      \\"displayName\\": \\"af44\\",
      \\"isInterruptable\\": true
    }, {
      \\"type\\": 5,
      \\"staticId\\": 18,
      \\"parent\\": 17,
      \\"displayName\\": \\"af44\\",
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 21,
          \\"column\\": 22
        },
        \\"end\\": null
      }
    }, {
      \\"type\\": 5,
      \\"staticId\\": 19,
      \\"parent\\": 17,
      \\"displayName\\": \\"af44\\",
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 22,
          \\"column\\": 27
        },
        \\"end\\": null
      }
    }, {
      \\"staticId\\": 20,
      \\"parent\\": 17,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 22,
          \\"column\\": 12
        },
        \\"end\\": {
          \\"line\\": 22,
          \\"column\\": 27
        }
      },
      \\"type\\": 4,
      \\"displayName\\": \\"(await af33(100))\\",
      \\"resumeId\\": 19
    }, {
      \\"type\\": 5,
      \\"staticId\\": 21,
      \\"parent\\": 17,
      \\"displayName\\": \\"af44\\",
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 23,
          \\"column\\": 26
        },
        \\"end\\": null
      }
    }, {
      \\"staticId\\": 22,
      \\"parent\\": 17,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 23,
          \\"column\\": 12
        },
        \\"end\\": {
          \\"line\\": 23,
          \\"column\\": 26
        }
      },
      \\"type\\": 4,
      \\"displayName\\": \\"(await af33(50))\\",
      \\"resumeId\\": 21
    }, {
      \\"staticId\\": 23,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 28,
          \\"column\\": 1
        },
        \\"end\\": {
          \\"line\\": 37,
          \\"column\\": 1
        }
      },
      \\"type\\": 2,
      \\"name\\": \\"main\\",
      \\"displayName\\": \\"main\\",
      \\"isInterruptable\\": true
    }, {
      \\"type\\": 5,
      \\"staticId\\": 24,
      \\"parent\\": 23,
      \\"displayName\\": \\"main\\",
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 28,
          \\"column\\": 23
        },
        \\"end\\": null
      }
    }, {
      \\"type\\": 5,
      \\"staticId\\": 25,
      \\"parent\\": 23,
      \\"displayName\\": \\"main\\",
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 33,
          \\"column\\": 6
        },
        \\"end\\": null
      }
    }, {
      \\"staticId\\": 26,
      \\"parent\\": 23,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 30,
          \\"column\\": 4
        },
        \\"end\\": {
          \\"line\\": 33,
          \\"column\\": 6
        }
      },
      \\"type\\": 4,
      \\"displayName\\": \\"(await Promise.all([af2(), a...)\\",
      \\"resumeId\\": 25
    }],
    \\"traces\\": [null, {
      \\"displayName\\": \\"function f0() {  const _co...\\",
      \\"traceId\\": 1,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 1,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 2,
          \\"column\\": 1
        }
      }
    }, {
      \\"displayName\\": \\"async function af1(a) {  c...\\",
      \\"traceId\\": 2,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 4,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 6,
          \\"column\\": 1
        }
      }
    }, {
      \\"displayName\\": \\"return Promise.resolve(a);\\",
      \\"traceId\\": 3,
      \\"parent\\": 3,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 5,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 5,
          \\"column\\": 28
        }
      }
    }, {
      \\"displayName\\": \\"Promise.resolve(a)\\",
      \\"traceId\\": 4,
      \\"parent\\": 3,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 5,
          \\"column\\": 9
        },
        \\"end\\": {
          \\"line\\": 5,
          \\"column\\": 27
        }
      }
    }, {
      \\"displayName\\": \\"async function af2() {  co...\\",
      \\"traceId\\": 5,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 8,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 13,
          \\"column\\": 1
        }
      }
    }, {
      \\"displayName\\": \\"await af1(1)\\",
      \\"traceId\\": 6,
      \\"parent\\": 5,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 9,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 9,
          \\"column\\": 14
        }
      }
    }, {
      \\"displayName\\": \\"af1(1)\\",
      \\"traceId\\": 7,
      \\"parent\\": 8,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 9,
          \\"column\\": 8
        },
        \\"end\\": {
          \\"line\\": 9,
          \\"column\\": 14
        }
      }
    }, {
      \\"displayName\\": \\"await af1(2)\\",
      \\"traceId\\": 8,
      \\"parent\\": 5,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 10,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 10,
          \\"column\\": 14
        }
      }
    }, {
      \\"displayName\\": \\"af1(2)\\",
      \\"traceId\\": 9,
      \\"parent\\": 10,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 10,
          \\"column\\": 8
        },
        \\"end\\": {
          \\"line\\": 10,
          \\"column\\": 14
        }
      }
    }, {
      \\"displayName\\": \\"return 2 + (await af1(3)) - 3;\\",
      \\"traceId\\": 10,
      \\"parent\\": 5,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 12,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 12,
          \\"column\\": 30
        }
      }
    }, {
      \\"displayName\\": \\"await af1(3)\\",
      \\"traceId\\": 11,
      \\"parent\\": 5,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 12,
          \\"column\\": 13
        },
        \\"end\\": {
          \\"line\\": 12,
          \\"column\\": 25
        }
      }
    }, {
      \\"displayName\\": \\"af1(3)\\",
      \\"traceId\\": 12,
      \\"parent\\": 12,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 12,
          \\"column\\": 19
        },
        \\"end\\": {
          \\"line\\": 12,
          \\"column\\": 25
        }
      }
    }, {
      \\"displayName\\": \\"async function af33(delay)...\\",
      \\"traceId\\": 13,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 15,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 19,
          \\"column\\": 1
        }
      }
    }, {
      \\"displayName\\": \\"return new Promise(r => {...\\",
      \\"traceId\\": 14,
      \\"parent\\": 13,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 16,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 18,
          \\"column\\": 5
        }
      }
    }, {
      \\"displayName\\": \\"setTimeout(r.bind(33), delay)\\",
      \\"traceId\\": 15,
      \\"parent\\": 15,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 17,
          \\"column\\": 4
        },
        \\"end\\": {
          \\"line\\": 17,
          \\"column\\": 33
        }
      }
    }, {
      \\"displayName\\": \\"r.bind(33)\\",
      \\"traceId\\": 16,
      \\"parent\\": 16,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 17,
          \\"column\\": 15
        },
        \\"end\\": {
          \\"line\\": 17,
          \\"column\\": 25
        }
      }
    }, {
      \\"displayName\\": \\"async function af44() {  c...\\",
      \\"traceId\\": 17,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 21,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 26,
          \\"column\\": 1
        }
      }
    }, {
      \\"displayName\\": \\"const a = await af33(100);\\",
      \\"traceId\\": 18,
      \\"parent\\": 17,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 22,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 22,
          \\"column\\": 28
        }
      }
    }, {
      \\"displayName\\": \\"await af33(100)\\",
      \\"traceId\\": 19,
      \\"parent\\": 17,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 22,
          \\"column\\": 12
        },
        \\"end\\": {
          \\"line\\": 22,
          \\"column\\": 27
        }
      }
    }, {
      \\"displayName\\": \\"af33(100)\\",
      \\"traceId\\": 20,
      \\"parent\\": 20,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 22,
          \\"column\\": 18
        },
        \\"end\\": {
          \\"line\\": 22,
          \\"column\\": 27
        }
      }
    }, {
      \\"displayName\\": \\"const b = await af33(50);\\",
      \\"traceId\\": 21,
      \\"parent\\": 17,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 23,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 23,
          \\"column\\": 27
        }
      }
    }, {
      \\"displayName\\": \\"await af33(50)\\",
      \\"traceId\\": 22,
      \\"parent\\": 17,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 23,
          \\"column\\": 12
        },
        \\"end\\": {
          \\"line\\": 23,
          \\"column\\": 26
        }
      }
    }, {
      \\"displayName\\": \\"af33(50)\\",
      \\"traceId\\": 23,
      \\"parent\\": 22,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 23,
          \\"column\\": 18
        },
        \\"end\\": {
          \\"line\\": 23,
          \\"column\\": 26
        }
      }
    }, {
      \\"displayName\\": \\"return a + b + af33(10);\\",
      \\"traceId\\": 24,
      \\"parent\\": 17,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 25,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 25,
          \\"column\\": 24
        }
      }
    }, {
      \\"displayName\\": \\"af33(10)\\",
      \\"traceId\\": 25,
      \\"parent\\": 17,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 25,
          \\"column\\": 15
        },
        \\"end\\": {
          \\"line\\": 25,
          \\"column\\": 23
        }
      }
    }, {
      \\"displayName\\": \\"async function main() {  c...\\",
      \\"traceId\\": 26,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 28,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 37,
          \\"column\\": 4
        }
      }
    }, {
      \\"displayName\\": \\"console.log((await Promise....\\",
      \\"traceId\\": 27,
      \\"parent\\": 23,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 29,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 34,
          \\"column\\": 3
        }
      }
    }, {
      \\"displayName\\": \\"await Promise.all([af2(), a...\\",
      \\"traceId\\": 28,
      \\"parent\\": 23,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 30,
          \\"column\\": 4
        },
        \\"end\\": {
          \\"line\\": 33,
          \\"column\\": 6
        }
      }
    }, {
      \\"displayName\\": \\"Promise.all([af2(), af44()])\\",
      \\"traceId\\": 29,
      \\"parent\\": 26,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 30,
          \\"column\\": 10
        },
        \\"end\\": {
          \\"line\\": 33,
          \\"column\\": 6
        }
      }
    }, {
      \\"displayName\\": \\"af2()\\",
      \\"traceId\\": 30,
      \\"parent\\": 26,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 31,
          \\"column\\": 6
        },
        \\"end\\": {
          \\"line\\": 31,
          \\"column\\": 11
        }
      }
    }, {
      \\"displayName\\": \\"af44()\\",
      \\"traceId\\": 31,
      \\"parent\\": 26,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 32,
          \\"column\\": 6
        },
        \\"end\\": {
          \\"line\\": 32,
          \\"column\\": 12
        }
      }
    }, {
      \\"displayName\\": \\"f0()\\",
      \\"traceId\\": 32,
      \\"parent\\": 23,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 36,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 36,
          \\"column\\": 6
        }
      }
    }]
  });
}
"
`;

exports[`dbux-babel-plugin await0.es5.js: await0.es5.js 1`] = `
"
let _ms;
function f1(r) {
  setTimeout(r, _ms)
}

async function sleep(ms) {
  // return new Promise(r => setTimeout(r, ms));
  _ms = ms;
  return new Promise(f1);
}

(async function main() {
  await sleep(50);
})();

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

require(\\"core-js/modules/es.object.to-string\\");

require(\\"core-js/modules/es.promise\\");

require(\\"core-js/modules/web.timers\\");

require(\\"regenerator-runtime/runtime\\");

var _dbuxRuntime = require('dbux-runtime')[\\"default\\"];

var _dbux = _dbux_init(_dbuxRuntime);

var _contextId = _dbux.getProgramContextId();

try {
  var f1 = function f1(r) {
    var _contextId2 = _dbux.pushImmediate(2);

    try {
      _dbux.t(3), _dbux.tv(3, setTimeout(_dbux.scheduleCallback(3, _contextId2, r), _ms));
    } finally {
      _dbux.popImmediate(_contextId2);
    }
  };

  var sleep = function sleep(ms) {
    var _contextId3;

    return regeneratorRuntime.async(function sleep$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _contextId3 = _dbux.pushImmediate(4);

            _dbux.pushResume(5, 4);

            _context.prev = 2;
            // return new Promise(r => setTimeout(r, ms));
            _ms = (_dbux.t(5), _dbux.tv(5, ms));

            _dbux.t(6);

            return _context.abrupt(\\"return\\", new Promise(f1));

          case 6:
            _context.prev = 6;

            _dbux.popResume();

            _dbux.popImmediate(_contextId3);

            return _context.finish(6);

          case 10:
          case \\"end\\":
            return _context.stop();
        }
      }
    }, null, null, [[2,, 6, 10]]);
  };

  _dbux.t(1);

  var _ms;

  _dbux.t(2);

  _dbux.t(4);

  _dbux.t(7), _dbux.tv(7, function main() {
    var _contextId4, _contextId5;

    return regeneratorRuntime.async(function main$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _contextId4 = _dbux.pushImmediate(6);

            _dbux.pushResume(7, 6);

            _context2.prev = 2;

            _dbux.t(8);

            _context2.t0 = _dbux;
            _context2.t1 = _dbux;
            _context2.next = 8;
            return regeneratorRuntime.awrap(_dbux.wrapAwait(_contextId5 = _dbux.preAwait(9), (_dbux.t(9), _dbux.tv(9, sleep(50)))));

          case 8:
            _context2.t2 = _context2.sent;
            _context2.t3 = _contextId5;
            _context2.t4 = _context2.t1.postAwait.call(_context2.t1, _context2.t2, _context2.t3);

            _context2.t0.tv.call(_context2.t0, 8, _context2.t4);

          case 12:
            _context2.prev = 12;

            _dbux.popResume();

            _dbux.popImmediate(_contextId4);

            return _context2.finish(12);

          case 16:
          case \\"end\\":
            return _context2.stop();
        }
      }
    }, null, null, [[2,, 12, 16]]);
  }());
} finally {
  _dbux.popProgram();
}

function _dbux_init(dbuxRuntime) {
  return dbuxRuntime.initProgram({
    \\"fileName\\": \\"await0.js\\",
    \\"filePath\\": \\"/Users/domi/code/dbux/samples/__samplesInput__/await0.js\\",
    \\"staticContexts\\": [null, {
      \\"staticId\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 1,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 14,
          \\"column\\": 5
        }
      },
      \\"type\\": 1,
      \\"name\\": \\"Program\\",
      \\"displayName\\": \\"Program\\"
    }, {
      \\"staticId\\": 2,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 2,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 4,
          \\"column\\": 1
        }
      },
      \\"type\\": 2,
      \\"name\\": \\"f1\\",
      \\"displayName\\": \\"f1\\",
      \\"isInterruptable\\": false
    }, {
      \\"staticId\\": 3,
      \\"parent\\": 2,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 3,
          \\"column\\": 13
        },
        \\"end\\": {
          \\"line\\": 3,
          \\"column\\": 14
        },
        \\"identifierName\\": \\"r\\"
      },
      \\"type\\": 3,
      \\"displayName\\": \\"(r)\\"
    }, {
      \\"staticId\\": 4,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 6,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 10,
          \\"column\\": 1
        }
      },
      \\"type\\": 2,
      \\"name\\": \\"sleep\\",
      \\"displayName\\": \\"sleep\\",
      \\"isInterruptable\\": true
    }, {
      \\"type\\": 5,
      \\"staticId\\": 5,
      \\"parent\\": 4,
      \\"displayName\\": \\"sleep\\",
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 6,
          \\"column\\": 25
        },
        \\"end\\": null
      }
    }, {
      \\"staticId\\": 6,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 12,
          \\"column\\": 1
        },
        \\"end\\": {
          \\"line\\": 14,
          \\"column\\": 1
        }
      },
      \\"type\\": 2,
      \\"name\\": \\"main\\",
      \\"displayName\\": \\"main\\",
      \\"isInterruptable\\": true
    }, {
      \\"type\\": 5,
      \\"staticId\\": 7,
      \\"parent\\": 6,
      \\"displayName\\": \\"main\\",
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 12,
          \\"column\\": 23
        },
        \\"end\\": null
      }
    }, {
      \\"type\\": 5,
      \\"staticId\\": 8,
      \\"parent\\": 6,
      \\"displayName\\": \\"main\\",
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 13,
          \\"column\\": 17
        },
        \\"end\\": null
      }
    }, {
      \\"staticId\\": 9,
      \\"parent\\": 6,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 13,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 13,
          \\"column\\": 17
        }
      },
      \\"type\\": 4,
      \\"displayName\\": \\"(await sleep(50))\\",
      \\"resumeId\\": 8
    }],
    \\"traces\\": [null, {
      \\"displayName\\": \\"let _ms;\\",
      \\"traceId\\": 1,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 1,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 1,
          \\"column\\": 8
        }
      }
    }, {
      \\"displayName\\": \\"function f1(r) {  const _c...\\",
      \\"traceId\\": 2,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 2,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 4,
          \\"column\\": 1
        }
      }
    }, {
      \\"displayName\\": \\"setTimeout(r, _ms)\\",
      \\"traceId\\": 3,
      \\"parent\\": 2,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 3,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 3,
          \\"column\\": 20
        }
      }
    }, {
      \\"displayName\\": \\"async function sleep(ms) {...\\",
      \\"traceId\\": 4,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 6,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 10,
          \\"column\\": 1
        }
      }
    }, {
      \\"displayName\\": \\"ms\\",
      \\"traceId\\": 5,
      \\"parent\\": 4,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 8,
          \\"column\\": 8
        },
        \\"end\\": {
          \\"line\\": 8,
          \\"column\\": 10
        },
        \\"identifierName\\": \\"ms\\"
      }
    }, {
      \\"displayName\\": \\"return new Promise(f1);\\",
      \\"traceId\\": 6,
      \\"parent\\": 4,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 9,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 9,
          \\"column\\": 25
        }
      }
    }, {
      \\"displayName\\": \\"async function main() {  a...\\",
      \\"traceId\\": 7,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 12,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 14,
          \\"column\\": 4
        }
      }
    }, {
      \\"displayName\\": \\"await sleep(50)\\",
      \\"traceId\\": 8,
      \\"parent\\": 6,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 13,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 13,
          \\"column\\": 17
        }
      }
    }, {
      \\"displayName\\": \\"sleep(50)\\",
      \\"traceId\\": 9,
      \\"parent\\": 9,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 13,
          \\"column\\": 8
        },
        \\"end\\": {
          \\"line\\": 13,
          \\"column\\": 17
        }
      }
    }]
  });
}
"
`;

exports[`dbux-babel-plugin await0.esNext.js: await0.esNext.js 1`] = `
"
let _ms;
function f1(r) {
  setTimeout(r, _ms)
}

async function sleep(ms) {
  // return new Promise(r => setTimeout(r, ms));
  _ms = ms;
  return new Promise(f1);
}

(async function main() {
  await sleep(50);
})();

      ↓ ↓ ↓ ↓ ↓ ↓

const _dbuxRuntime = require('dbux-runtime').default;

const _dbux = _dbux_init(_dbuxRuntime);

const _contextId = _dbux.getProgramContextId();

try {
  _dbux.t(1);

  let _ms;

  _dbux.t(2);

  function f1(r) {
    const _contextId2 = _dbux.pushImmediate(2);

    try {
      _dbux.t(3), _dbux.tv(3, setTimeout(_dbux.scheduleCallback(3, _contextId2, r), _ms));
    } finally {
      _dbux.popImmediate(_contextId2);
    }
  }

  _dbux.t(4);

  async function sleep(ms) {
    const _contextId3 = _dbux.pushImmediate(4);

    _dbux.pushResume(5, 4);

    try {
      // return new Promise(r => setTimeout(r, ms));
      _ms = (_dbux.t(5), _dbux.tv(5, ms));

      _dbux.t(6);

      return new Promise(f1);
    } finally {
      _dbux.popResume();

      _dbux.popImmediate(_contextId3);
    }
  }

  _dbux.t(7), _dbux.tv(7, async function main() {
    const _contextId4 = _dbux.pushImmediate(6);

    _dbux.pushResume(7, 6);

    try {
      var _contextId5;

      _dbux.t(8), _dbux.tv(8, _dbux.postAwait((await _dbux.wrapAwait(_contextId5 = _dbux.preAwait(9), (_dbux.t(9), _dbux.tv(9, sleep(50))))), _contextId5));
    } finally {
      _dbux.popResume();

      _dbux.popImmediate(_contextId4);
    }
  }());
} finally {
  _dbux.popProgram();
}

function _dbux_init(dbuxRuntime) {
  return dbuxRuntime.initProgram({
    \\"fileName\\": \\"await0.js\\",
    \\"filePath\\": \\"/Users/domi/code/dbux/samples/__samplesInput__/await0.js\\",
    \\"staticContexts\\": [null, {
      \\"staticId\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 1,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 14,
          \\"column\\": 5
        }
      },
      \\"type\\": 1,
      \\"name\\": \\"Program\\",
      \\"displayName\\": \\"Program\\"
    }, {
      \\"staticId\\": 2,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 2,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 4,
          \\"column\\": 1
        }
      },
      \\"type\\": 2,
      \\"name\\": \\"f1\\",
      \\"displayName\\": \\"f1\\",
      \\"isInterruptable\\": false
    }, {
      \\"staticId\\": 3,
      \\"parent\\": 2,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 3,
          \\"column\\": 13
        },
        \\"end\\": {
          \\"line\\": 3,
          \\"column\\": 14
        },
        \\"identifierName\\": \\"r\\"
      },
      \\"type\\": 3,
      \\"displayName\\": \\"(r)\\"
    }, {
      \\"staticId\\": 4,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 6,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 10,
          \\"column\\": 1
        }
      },
      \\"type\\": 2,
      \\"name\\": \\"sleep\\",
      \\"displayName\\": \\"sleep\\",
      \\"isInterruptable\\": true
    }, {
      \\"type\\": 5,
      \\"staticId\\": 5,
      \\"parent\\": 4,
      \\"displayName\\": \\"sleep\\",
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 6,
          \\"column\\": 25
        },
        \\"end\\": null
      }
    }, {
      \\"staticId\\": 6,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 12,
          \\"column\\": 1
        },
        \\"end\\": {
          \\"line\\": 14,
          \\"column\\": 1
        }
      },
      \\"type\\": 2,
      \\"name\\": \\"main\\",
      \\"displayName\\": \\"main\\",
      \\"isInterruptable\\": true
    }, {
      \\"type\\": 5,
      \\"staticId\\": 7,
      \\"parent\\": 6,
      \\"displayName\\": \\"main\\",
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 12,
          \\"column\\": 23
        },
        \\"end\\": null
      }
    }, {
      \\"type\\": 5,
      \\"staticId\\": 8,
      \\"parent\\": 6,
      \\"displayName\\": \\"main\\",
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 13,
          \\"column\\": 17
        },
        \\"end\\": null
      }
    }, {
      \\"staticId\\": 9,
      \\"parent\\": 6,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 13,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 13,
          \\"column\\": 17
        }
      },
      \\"type\\": 4,
      \\"displayName\\": \\"(await sleep(50))\\",
      \\"resumeId\\": 8
    }],
    \\"traces\\": [null, {
      \\"displayName\\": \\"let _ms;\\",
      \\"traceId\\": 1,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 1,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 1,
          \\"column\\": 8
        }
      }
    }, {
      \\"displayName\\": \\"function f1(r) {  const _c...\\",
      \\"traceId\\": 2,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 2,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 4,
          \\"column\\": 1
        }
      }
    }, {
      \\"displayName\\": \\"setTimeout(r, _ms)\\",
      \\"traceId\\": 3,
      \\"parent\\": 2,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 3,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 3,
          \\"column\\": 20
        }
      }
    }, {
      \\"displayName\\": \\"async function sleep(ms) {...\\",
      \\"traceId\\": 4,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 6,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 10,
          \\"column\\": 1
        }
      }
    }, {
      \\"displayName\\": \\"ms\\",
      \\"traceId\\": 5,
      \\"parent\\": 4,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 8,
          \\"column\\": 8
        },
        \\"end\\": {
          \\"line\\": 8,
          \\"column\\": 10
        },
        \\"identifierName\\": \\"ms\\"
      }
    }, {
      \\"displayName\\": \\"return new Promise(f1);\\",
      \\"traceId\\": 6,
      \\"parent\\": 4,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 9,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 9,
          \\"column\\": 25
        }
      }
    }, {
      \\"displayName\\": \\"async function main() {  a...\\",
      \\"traceId\\": 7,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 12,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 14,
          \\"column\\": 4
        }
      }
    }, {
      \\"displayName\\": \\"await sleep(50)\\",
      \\"traceId\\": 8,
      \\"parent\\": 6,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 13,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 13,
          \\"column\\": 17
        }
      }
    }, {
      \\"displayName\\": \\"sleep(50)\\",
      \\"traceId\\": 9,
      \\"parent\\": 9,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 13,
          \\"column\\": 8
        },
        \\"end\\": {
          \\"line\\": 13,
          \\"column\\": 17
        }
      }
    }]
  });
}
"
`;

exports[`dbux-babel-plugin await1.es5.js: await1.es5.js 1`] = `
"
async function sleep(ms) {
  return new Promise(r => setTimeout(r, ms));
}

function f1() {
  return sleep(100);
}

async function f2() {
  await sleep(100);
}

async function f3() {
  await sleep(200);
}

async function f4(...args) {
  await Promise.all(args.map(f => f()));
}

(async function main() {
  await f1();
  await f4(f2, f3, sleep.bind(null, 400));
})();

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

require(\\"core-js/modules/es.array.iterator\\");

require(\\"core-js/modules/es.array.map\\");

require(\\"core-js/modules/es.function.bind\\");

require(\\"core-js/modules/es.object.to-string\\");

require(\\"core-js/modules/es.promise\\");

require(\\"core-js/modules/es.string.iterator\\");

require(\\"core-js/modules/web.dom-collections.iterator\\");

require(\\"core-js/modules/web.timers\\");

require(\\"regenerator-runtime/runtime\\");

var _dbuxRuntime = require('dbux-runtime')[\\"default\\"];

var _dbux = _dbux_init(_dbuxRuntime);

var _contextId = _dbux.getProgramContextId();

try {
  var sleep = function sleep(ms) {
    var _contextId2;

    return regeneratorRuntime.async(function sleep$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _contextId2 = _dbux.pushImmediate(2);

            _dbux.pushResume(3, 2);

            _context.prev = 2;

            _dbux.t(2);

            return _context.abrupt(\\"return\\", new Promise(function (r) {
              var _contextId3 = _dbux.pushImmediate(4);

              try {
                return _dbux.t(3), _dbux.tv(3, setTimeout(_dbux.scheduleCallback(5, _contextId3, r), ms));
              } finally {
                _dbux.popImmediate(_contextId3);
              }
            }));

          case 5:
            _context.prev = 5;

            _dbux.popResume();

            _dbux.popImmediate(_contextId2);

            return _context.finish(5);

          case 9:
          case \\"end\\":
            return _context.stop();
        }
      }
    }, null, null, [[2,, 5, 9]]);
  };

  var f1 = function f1() {
    var _contextId4 = _dbux.pushImmediate(6);

    try {
      _dbux.t(5);

      return _dbux.t(6), _dbux.tv(6, sleep(100));
    } finally {
      _dbux.popImmediate(_contextId4);
    }
  };

  var f2 = function f2() {
    var _contextId5, _contextId6;

    return regeneratorRuntime.async(function f2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _contextId5 = _dbux.pushImmediate(7);

            _dbux.pushResume(8, 7);

            _context2.prev = 2;

            _dbux.t(8);

            _context2.t0 = _dbux;
            _context2.t1 = _dbux;
            _context2.next = 8;
            return regeneratorRuntime.awrap(_dbux.wrapAwait(_contextId6 = _dbux.preAwait(10), (_dbux.t(9), _dbux.tv(9, sleep(100)))));

          case 8:
            _context2.t2 = _context2.sent;
            _context2.t3 = _contextId6;
            _context2.t4 = _context2.t1.postAwait.call(_context2.t1, _context2.t2, _context2.t3);

            _context2.t0.tv.call(_context2.t0, 8, _context2.t4);

          case 12:
            _context2.prev = 12;

            _dbux.popResume();

            _dbux.popImmediate(_contextId5);

            return _context2.finish(12);

          case 16:
          case \\"end\\":
            return _context2.stop();
        }
      }
    }, null, null, [[2,, 12, 16]]);
  };

  var f3 = function f3() {
    var _contextId7, _contextId8;

    return regeneratorRuntime.async(function f3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _contextId7 = _dbux.pushImmediate(11);

            _dbux.pushResume(12, 11);

            _context3.prev = 2;

            _dbux.t(11);

            _context3.t0 = _dbux;
            _context3.t1 = _dbux;
            _context3.next = 8;
            return regeneratorRuntime.awrap(_dbux.wrapAwait(_contextId8 = _dbux.preAwait(14), (_dbux.t(12), _dbux.tv(12, sleep(200)))));

          case 8:
            _context3.t2 = _context3.sent;
            _context3.t3 = _contextId8;
            _context3.t4 = _context3.t1.postAwait.call(_context3.t1, _context3.t2, _context3.t3);

            _context3.t0.tv.call(_context3.t0, 11, _context3.t4);

          case 12:
            _context3.prev = 12;

            _dbux.popResume();

            _dbux.popImmediate(_contextId7);

            return _context3.finish(12);

          case 16:
          case \\"end\\":
            return _context3.stop();
        }
      }
    }, null, null, [[2,, 12, 16]]);
  };

  var f4 = function f4() {
    var _contextId9,
        _contextId10,
        _len,
        args,
        _key,
        _args4 = arguments;

    return regeneratorRuntime.async(function f4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _contextId9 = _dbux.pushImmediate(15);

            _dbux.pushResume(16, 15);

            _context4.prev = 2;

            for (_len = _args4.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = _args4[_key];
            }

            _dbux.t(14);

            _context4.t0 = _dbux;
            _context4.t1 = _dbux;
            _context4.next = 9;
            return regeneratorRuntime.awrap(_dbux.wrapAwait(_contextId10 = _dbux.preAwait(18), (_dbux.t(15), _dbux.tv(15, Promise.all((_dbux.t(16), _dbux.tv(16, args.map(_dbux.scheduleCallback(19, _contextId9, function (f) {
              var _contextId11 = _dbux.pushImmediate(20);

              try {
                return _dbux.t(17), _dbux.tv(17, f());
              } finally {
                _dbux.popImmediate(_contextId11);
              }
            })))))))));

          case 9:
            _context4.t2 = _context4.sent;
            _context4.t3 = _contextId10;
            _context4.t4 = _context4.t1.postAwait.call(_context4.t1, _context4.t2, _context4.t3);

            _context4.t0.tv.call(_context4.t0, 14, _context4.t4);

          case 13:
            _context4.prev = 13;

            _dbux.popResume();

            _dbux.popImmediate(_contextId9);

            return _context4.finish(13);

          case 17:
          case \\"end\\":
            return _context4.stop();
        }
      }
    }, null, null, [[2,, 13, 17]]);
  };

  _dbux.t(1);

  _dbux.t(4);

  _dbux.t(7);

  _dbux.t(10);

  _dbux.t(13);

  _dbux.t(18), _dbux.tv(18, function main() {
    var _contextId12, _contextId13, _contextId14;

    return regeneratorRuntime.async(function main$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _contextId12 = _dbux.pushImmediate(21);

            _dbux.pushResume(22, 21);

            _context5.prev = 2;

            _dbux.t(19);

            _context5.t0 = _dbux;
            _context5.t1 = _dbux;
            _context5.next = 8;
            return regeneratorRuntime.awrap(_dbux.wrapAwait(_contextId13 = _dbux.preAwait(24), (_dbux.t(20), _dbux.tv(20, f1()))));

          case 8:
            _context5.t2 = _context5.sent;
            _context5.t3 = _contextId13;
            _context5.t4 = _context5.t1.postAwait.call(_context5.t1, _context5.t2, _context5.t3);

            _context5.t0.tv.call(_context5.t0, 19, _context5.t4);

            _dbux.t(21);

            _context5.t5 = _dbux;
            _context5.t6 = _dbux;
            _context5.next = 17;
            return regeneratorRuntime.awrap(_dbux.wrapAwait(_contextId14 = _dbux.preAwait(26), (_dbux.t(22), _dbux.tv(22, f4(f2, f3, (_dbux.t(23), _dbux.tv(23, sleep.bind(null, 400))))))));

          case 17:
            _context5.t7 = _context5.sent;
            _context5.t8 = _contextId14;
            _context5.t9 = _context5.t6.postAwait.call(_context5.t6, _context5.t7, _context5.t8);

            _context5.t5.tv.call(_context5.t5, 21, _context5.t9);

          case 21:
            _context5.prev = 21;

            _dbux.popResume();

            _dbux.popImmediate(_contextId12);

            return _context5.finish(21);

          case 25:
          case \\"end\\":
            return _context5.stop();
        }
      }
    }, null, null, [[2,, 21, 25]]);
  }());
} finally {
  _dbux.popProgram();
}

function _dbux_init(dbuxRuntime) {
  return dbuxRuntime.initProgram({
    \\"fileName\\": \\"await1.js\\",
    \\"filePath\\": \\"/Users/domi/code/dbux/samples/__samplesInput__/await1.js\\",
    \\"staticContexts\\": [null, {
      \\"staticId\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 1,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 24,
          \\"column\\": 5
        }
      },
      \\"type\\": 1,
      \\"name\\": \\"Program\\",
      \\"displayName\\": \\"Program\\"
    }, {
      \\"staticId\\": 2,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 1,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 3,
          \\"column\\": 1
        }
      },
      \\"type\\": 2,
      \\"name\\": \\"sleep\\",
      \\"displayName\\": \\"sleep\\",
      \\"isInterruptable\\": true
    }, {
      \\"type\\": 5,
      \\"staticId\\": 3,
      \\"parent\\": 2,
      \\"displayName\\": \\"sleep\\",
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 1,
          \\"column\\": 25
        },
        \\"end\\": null
      }
    }, {
      \\"staticId\\": 4,
      \\"parent\\": 2,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 2,
          \\"column\\": 21
        },
        \\"end\\": {
          \\"line\\": 2,
          \\"column\\": 43
        }
      },
      \\"type\\": 2,
      \\"displayName\\": \\"(anonymous)\\",
      \\"isInterruptable\\": false
    }, {
      \\"staticId\\": 5,
      \\"parent\\": 4,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 2,
          \\"column\\": 37
        },
        \\"end\\": {
          \\"line\\": 2,
          \\"column\\": 38
        },
        \\"identifierName\\": \\"r\\"
      },
      \\"type\\": 3,
      \\"displayName\\": \\"(r)\\"
    }, {
      \\"staticId\\": 6,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 5,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 7,
          \\"column\\": 1
        }
      },
      \\"type\\": 2,
      \\"name\\": \\"f1\\",
      \\"displayName\\": \\"f1\\",
      \\"isInterruptable\\": false
    }, {
      \\"staticId\\": 7,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 9,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 11,
          \\"column\\": 1
        }
      },
      \\"type\\": 2,
      \\"name\\": \\"f2\\",
      \\"displayName\\": \\"f2\\",
      \\"isInterruptable\\": true
    }, {
      \\"type\\": 5,
      \\"staticId\\": 8,
      \\"parent\\": 7,
      \\"displayName\\": \\"f2\\",
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 9,
          \\"column\\": 20
        },
        \\"end\\": null
      }
    }, {
      \\"type\\": 5,
      \\"staticId\\": 9,
      \\"parent\\": 7,
      \\"displayName\\": \\"f2\\",
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 10,
          \\"column\\": 18
        },
        \\"end\\": null
      }
    }, {
      \\"staticId\\": 10,
      \\"parent\\": 7,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 10,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 10,
          \\"column\\": 18
        }
      },
      \\"type\\": 4,
      \\"displayName\\": \\"(await sleep(100))\\",
      \\"resumeId\\": 9
    }, {
      \\"staticId\\": 11,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 13,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 15,
          \\"column\\": 1
        }
      },
      \\"type\\": 2,
      \\"name\\": \\"f3\\",
      \\"displayName\\": \\"f3\\",
      \\"isInterruptable\\": true
    }, {
      \\"type\\": 5,
      \\"staticId\\": 12,
      \\"parent\\": 11,
      \\"displayName\\": \\"f3\\",
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 13,
          \\"column\\": 20
        },
        \\"end\\": null
      }
    }, {
      \\"type\\": 5,
      \\"staticId\\": 13,
      \\"parent\\": 11,
      \\"displayName\\": \\"f3\\",
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 14,
          \\"column\\": 18
        },
        \\"end\\": null
      }
    }, {
      \\"staticId\\": 14,
      \\"parent\\": 11,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 14,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 14,
          \\"column\\": 18
        }
      },
      \\"type\\": 4,
      \\"displayName\\": \\"(await sleep(200))\\",
      \\"resumeId\\": 13
    }, {
      \\"staticId\\": 15,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 17,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 19,
          \\"column\\": 1
        }
      },
      \\"type\\": 2,
      \\"name\\": \\"f4\\",
      \\"displayName\\": \\"f4\\",
      \\"isInterruptable\\": true
    }, {
      \\"type\\": 5,
      \\"staticId\\": 16,
      \\"parent\\": 15,
      \\"displayName\\": \\"f4\\",
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 17,
          \\"column\\": 27
        },
        \\"end\\": null
      }
    }, {
      \\"type\\": 5,
      \\"staticId\\": 17,
      \\"parent\\": 15,
      \\"displayName\\": \\"f4\\",
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 18,
          \\"column\\": 39
        },
        \\"end\\": null
      }
    }, {
      \\"staticId\\": 18,
      \\"parent\\": 15,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 18,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 18,
          \\"column\\": 39
        }
      },
      \\"type\\": 4,
      \\"displayName\\": \\"(await Promise.all(args.map(...)\\",
      \\"resumeId\\": 17
    }, {
      \\"staticId\\": 19,
      \\"parent\\": 18,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 18,
          \\"column\\": 29
        },
        \\"end\\": {
          \\"line\\": 18,
          \\"column\\": 37
        }
      },
      \\"type\\": 3,
      \\"displayName\\": \\"(f => f())\\"
    }, {
      \\"staticId\\": 20,
      \\"parent\\": 19,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 18,
          \\"column\\": 29
        },
        \\"end\\": {
          \\"line\\": 18,
          \\"column\\": 37
        }
      },
      \\"type\\": 2,
      \\"displayName\\": \\"(anonymous)\\",
      \\"isInterruptable\\": false
    }, {
      \\"staticId\\": 21,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 21,
          \\"column\\": 1
        },
        \\"end\\": {
          \\"line\\": 24,
          \\"column\\": 1
        }
      },
      \\"type\\": 2,
      \\"name\\": \\"main\\",
      \\"displayName\\": \\"main\\",
      \\"isInterruptable\\": true
    }, {
      \\"type\\": 5,
      \\"staticId\\": 22,
      \\"parent\\": 21,
      \\"displayName\\": \\"main\\",
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 21,
          \\"column\\": 23
        },
        \\"end\\": null
      }
    }, {
      \\"type\\": 5,
      \\"staticId\\": 23,
      \\"parent\\": 21,
      \\"displayName\\": \\"main\\",
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 22,
          \\"column\\": 12
        },
        \\"end\\": null
      }
    }, {
      \\"staticId\\": 24,
      \\"parent\\": 21,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 22,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 22,
          \\"column\\": 12
        }
      },
      \\"type\\": 4,
      \\"displayName\\": \\"(await f1())\\",
      \\"resumeId\\": 23
    }, {
      \\"type\\": 5,
      \\"staticId\\": 25,
      \\"parent\\": 21,
      \\"displayName\\": \\"main\\",
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 23,
          \\"column\\": 41
        },
        \\"end\\": null
      }
    }, {
      \\"staticId\\": 26,
      \\"parent\\": 21,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 23,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 23,
          \\"column\\": 41
        }
      },
      \\"type\\": 4,
      \\"displayName\\": \\"(await f4(f2, f3, sleep.bind...)\\",
      \\"resumeId\\": 25
    }],
    \\"traces\\": [null, {
      \\"displayName\\": \\"async function sleep(ms) {...\\",
      \\"traceId\\": 1,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 1,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 3,
          \\"column\\": 1
        }
      }
    }, {
      \\"displayName\\": \\"return new Promise(r => set...\\",
      \\"traceId\\": 2,
      \\"parent\\": 2,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 2,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 2,
          \\"column\\": 45
        }
      }
    }, {
      \\"displayName\\": \\"setTimeout(r, ms)\\",
      \\"traceId\\": 3,
      \\"parent\\": 4,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 2,
          \\"column\\": 26
        },
        \\"end\\": {
          \\"line\\": 2,
          \\"column\\": 43
        }
      }
    }, {
      \\"displayName\\": \\"function f1() {  const _co...\\",
      \\"traceId\\": 4,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 5,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 7,
          \\"column\\": 1
        }
      }
    }, {
      \\"displayName\\": \\"return sleep(100);\\",
      \\"traceId\\": 5,
      \\"parent\\": 6,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 6,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 6,
          \\"column\\": 20
        }
      }
    }, {
      \\"displayName\\": \\"sleep(100)\\",
      \\"traceId\\": 6,
      \\"parent\\": 6,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 6,
          \\"column\\": 9
        },
        \\"end\\": {
          \\"line\\": 6,
          \\"column\\": 19
        }
      }
    }, {
      \\"displayName\\": \\"async function f2() {  con...\\",
      \\"traceId\\": 7,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 9,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 11,
          \\"column\\": 1
        }
      }
    }, {
      \\"displayName\\": \\"await sleep(100)\\",
      \\"traceId\\": 8,
      \\"parent\\": 7,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 10,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 10,
          \\"column\\": 18
        }
      }
    }, {
      \\"displayName\\": \\"sleep(100)\\",
      \\"traceId\\": 9,
      \\"parent\\": 10,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 10,
          \\"column\\": 8
        },
        \\"end\\": {
          \\"line\\": 10,
          \\"column\\": 18
        }
      }
    }, {
      \\"displayName\\": \\"async function f3() {  con...\\",
      \\"traceId\\": 10,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 13,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 15,
          \\"column\\": 1
        }
      }
    }, {
      \\"displayName\\": \\"await sleep(200)\\",
      \\"traceId\\": 11,
      \\"parent\\": 11,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 14,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 14,
          \\"column\\": 18
        }
      }
    }, {
      \\"displayName\\": \\"sleep(200)\\",
      \\"traceId\\": 12,
      \\"parent\\": 14,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 14,
          \\"column\\": 8
        },
        \\"end\\": {
          \\"line\\": 14,
          \\"column\\": 18
        }
      }
    }, {
      \\"displayName\\": \\"async function f4(...args)...\\",
      \\"traceId\\": 13,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 17,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 19,
          \\"column\\": 1
        }
      }
    }, {
      \\"displayName\\": \\"await Promise.all(args.map(...\\",
      \\"traceId\\": 14,
      \\"parent\\": 15,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 18,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 18,
          \\"column\\": 39
        }
      }
    }, {
      \\"displayName\\": \\"Promise.all(args.map(f => f...\\",
      \\"traceId\\": 15,
      \\"parent\\": 18,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 18,
          \\"column\\": 8
        },
        \\"end\\": {
          \\"line\\": 18,
          \\"column\\": 39
        }
      }
    }, {
      \\"displayName\\": \\"args.map(f => f())\\",
      \\"traceId\\": 16,
      \\"parent\\": 18,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 18,
          \\"column\\": 20
        },
        \\"end\\": {
          \\"line\\": 18,
          \\"column\\": 38
        }
      }
    }, {
      \\"displayName\\": \\"f()\\",
      \\"traceId\\": 17,
      \\"parent\\": 20,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 18,
          \\"column\\": 34
        },
        \\"end\\": {
          \\"line\\": 18,
          \\"column\\": 37
        }
      }
    }, {
      \\"displayName\\": \\"async function main() {  a...\\",
      \\"traceId\\": 18,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 21,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 24,
          \\"column\\": 4
        }
      }
    }, {
      \\"displayName\\": \\"await f1()\\",
      \\"traceId\\": 19,
      \\"parent\\": 21,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 22,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 22,
          \\"column\\": 12
        }
      }
    }, {
      \\"displayName\\": \\"f1()\\",
      \\"traceId\\": 20,
      \\"parent\\": 24,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 22,
          \\"column\\": 8
        },
        \\"end\\": {
          \\"line\\": 22,
          \\"column\\": 12
        }
      }
    }, {
      \\"displayName\\": \\"await f4(f2, f3, sleep.bind...\\",
      \\"traceId\\": 21,
      \\"parent\\": 21,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 23,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 23,
          \\"column\\": 41
        }
      }
    }, {
      \\"displayName\\": \\"f4(f2, f3, sleep.bind(null,...\\",
      \\"traceId\\": 22,
      \\"parent\\": 26,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 23,
          \\"column\\": 8
        },
        \\"end\\": {
          \\"line\\": 23,
          \\"column\\": 41
        }
      }
    }, {
      \\"displayName\\": \\"sleep.bind(null, 400)\\",
      \\"traceId\\": 23,
      \\"parent\\": 26,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 23,
          \\"column\\": 19
        },
        \\"end\\": {
          \\"line\\": 23,
          \\"column\\": 40
        }
      }
    }]
  });
}
"
`;

exports[`dbux-babel-plugin await1.esNext.js: await1.esNext.js 1`] = `
"
async function sleep(ms) {
  return new Promise(r => setTimeout(r, ms));
}

function f1() {
  return sleep(100);
}

async function f2() {
  await sleep(100);
}

async function f3() {
  await sleep(200);
}

async function f4(...args) {
  await Promise.all(args.map(f => f()));
}

(async function main() {
  await f1();
  await f4(f2, f3, sleep.bind(null, 400));
})();

      ↓ ↓ ↓ ↓ ↓ ↓

const _dbuxRuntime = require('dbux-runtime').default;

const _dbux = _dbux_init(_dbuxRuntime);

const _contextId = _dbux.getProgramContextId();

try {
  _dbux.t(1);

  async function sleep(ms) {
    const _contextId2 = _dbux.pushImmediate(2);

    _dbux.pushResume(3, 2);

    try {
      _dbux.t(2);

      return new Promise(r => {
        const _contextId3 = _dbux.pushImmediate(4);

        try {
          return _dbux.t(3), _dbux.tv(3, setTimeout(_dbux.scheduleCallback(5, _contextId3, r), ms));
        } finally {
          _dbux.popImmediate(_contextId3);
        }
      });
    } finally {
      _dbux.popResume();

      _dbux.popImmediate(_contextId2);
    }
  }

  _dbux.t(4);

  function f1() {
    const _contextId4 = _dbux.pushImmediate(6);

    try {
      _dbux.t(5);

      return _dbux.t(6), _dbux.tv(6, sleep(100));
    } finally {
      _dbux.popImmediate(_contextId4);
    }
  }

  _dbux.t(7);

  async function f2() {
    const _contextId5 = _dbux.pushImmediate(7);

    _dbux.pushResume(8, 7);

    try {
      var _contextId6;

      _dbux.t(8), _dbux.tv(8, _dbux.postAwait((await _dbux.wrapAwait(_contextId6 = _dbux.preAwait(10), (_dbux.t(9), _dbux.tv(9, sleep(100))))), _contextId6));
    } finally {
      _dbux.popResume();

      _dbux.popImmediate(_contextId5);
    }
  }

  _dbux.t(10);

  async function f3() {
    const _contextId7 = _dbux.pushImmediate(11);

    _dbux.pushResume(12, 11);

    try {
      var _contextId8;

      _dbux.t(11), _dbux.tv(11, _dbux.postAwait((await _dbux.wrapAwait(_contextId8 = _dbux.preAwait(14), (_dbux.t(12), _dbux.tv(12, sleep(200))))), _contextId8));
    } finally {
      _dbux.popResume();

      _dbux.popImmediate(_contextId7);
    }
  }

  _dbux.t(13);

  async function f4(...args) {
    const _contextId9 = _dbux.pushImmediate(15);

    _dbux.pushResume(16, 15);

    try {
      var _contextId10;

      _dbux.t(14), _dbux.tv(14, _dbux.postAwait((await _dbux.wrapAwait(_contextId10 = _dbux.preAwait(18), (_dbux.t(15), _dbux.tv(15, Promise.all((_dbux.t(16), _dbux.tv(16, args.map(_dbux.scheduleCallback(19, _contextId9, f => {
        const _contextId11 = _dbux.pushImmediate(20);

        try {
          return _dbux.t(17), _dbux.tv(17, f());
        } finally {
          _dbux.popImmediate(_contextId11);
        }
      }))))))))), _contextId10));
    } finally {
      _dbux.popResume();

      _dbux.popImmediate(_contextId9);
    }
  }

  _dbux.t(18), _dbux.tv(18, async function main() {
    const _contextId12 = _dbux.pushImmediate(21);

    _dbux.pushResume(22, 21);

    try {
      var _contextId13, _contextId14;

      _dbux.t(19), _dbux.tv(19, _dbux.postAwait((await _dbux.wrapAwait(_contextId13 = _dbux.preAwait(24), (_dbux.t(20), _dbux.tv(20, f1())))), _contextId13));
      _dbux.t(21), _dbux.tv(21, _dbux.postAwait((await _dbux.wrapAwait(_contextId14 = _dbux.preAwait(26), (_dbux.t(22), _dbux.tv(22, f4(f2, f3, (_dbux.t(23), _dbux.tv(23, sleep.bind(null, 400)))))))), _contextId14));
    } finally {
      _dbux.popResume();

      _dbux.popImmediate(_contextId12);
    }
  }());
} finally {
  _dbux.popProgram();
}

function _dbux_init(dbuxRuntime) {
  return dbuxRuntime.initProgram({
    \\"fileName\\": \\"await1.js\\",
    \\"filePath\\": \\"/Users/domi/code/dbux/samples/__samplesInput__/await1.js\\",
    \\"staticContexts\\": [null, {
      \\"staticId\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 1,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 24,
          \\"column\\": 5
        }
      },
      \\"type\\": 1,
      \\"name\\": \\"Program\\",
      \\"displayName\\": \\"Program\\"
    }, {
      \\"staticId\\": 2,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 1,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 3,
          \\"column\\": 1
        }
      },
      \\"type\\": 2,
      \\"name\\": \\"sleep\\",
      \\"displayName\\": \\"sleep\\",
      \\"isInterruptable\\": true
    }, {
      \\"type\\": 5,
      \\"staticId\\": 3,
      \\"parent\\": 2,
      \\"displayName\\": \\"sleep\\",
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 1,
          \\"column\\": 25
        },
        \\"end\\": null
      }
    }, {
      \\"staticId\\": 4,
      \\"parent\\": 2,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 2,
          \\"column\\": 21
        },
        \\"end\\": {
          \\"line\\": 2,
          \\"column\\": 43
        }
      },
      \\"type\\": 2,
      \\"displayName\\": \\"(anonymous)\\",
      \\"isInterruptable\\": false
    }, {
      \\"staticId\\": 5,
      \\"parent\\": 4,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 2,
          \\"column\\": 37
        },
        \\"end\\": {
          \\"line\\": 2,
          \\"column\\": 38
        },
        \\"identifierName\\": \\"r\\"
      },
      \\"type\\": 3,
      \\"displayName\\": \\"(r)\\"
    }, {
      \\"staticId\\": 6,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 5,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 7,
          \\"column\\": 1
        }
      },
      \\"type\\": 2,
      \\"name\\": \\"f1\\",
      \\"displayName\\": \\"f1\\",
      \\"isInterruptable\\": false
    }, {
      \\"staticId\\": 7,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 9,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 11,
          \\"column\\": 1
        }
      },
      \\"type\\": 2,
      \\"name\\": \\"f2\\",
      \\"displayName\\": \\"f2\\",
      \\"isInterruptable\\": true
    }, {
      \\"type\\": 5,
      \\"staticId\\": 8,
      \\"parent\\": 7,
      \\"displayName\\": \\"f2\\",
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 9,
          \\"column\\": 20
        },
        \\"end\\": null
      }
    }, {
      \\"type\\": 5,
      \\"staticId\\": 9,
      \\"parent\\": 7,
      \\"displayName\\": \\"f2\\",
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 10,
          \\"column\\": 18
        },
        \\"end\\": null
      }
    }, {
      \\"staticId\\": 10,
      \\"parent\\": 7,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 10,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 10,
          \\"column\\": 18
        }
      },
      \\"type\\": 4,
      \\"displayName\\": \\"(await sleep(100))\\",
      \\"resumeId\\": 9
    }, {
      \\"staticId\\": 11,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 13,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 15,
          \\"column\\": 1
        }
      },
      \\"type\\": 2,
      \\"name\\": \\"f3\\",
      \\"displayName\\": \\"f3\\",
      \\"isInterruptable\\": true
    }, {
      \\"type\\": 5,
      \\"staticId\\": 12,
      \\"parent\\": 11,
      \\"displayName\\": \\"f3\\",
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 13,
          \\"column\\": 20
        },
        \\"end\\": null
      }
    }, {
      \\"type\\": 5,
      \\"staticId\\": 13,
      \\"parent\\": 11,
      \\"displayName\\": \\"f3\\",
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 14,
          \\"column\\": 18
        },
        \\"end\\": null
      }
    }, {
      \\"staticId\\": 14,
      \\"parent\\": 11,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 14,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 14,
          \\"column\\": 18
        }
      },
      \\"type\\": 4,
      \\"displayName\\": \\"(await sleep(200))\\",
      \\"resumeId\\": 13
    }, {
      \\"staticId\\": 15,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 17,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 19,
          \\"column\\": 1
        }
      },
      \\"type\\": 2,
      \\"name\\": \\"f4\\",
      \\"displayName\\": \\"f4\\",
      \\"isInterruptable\\": true
    }, {
      \\"type\\": 5,
      \\"staticId\\": 16,
      \\"parent\\": 15,
      \\"displayName\\": \\"f4\\",
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 17,
          \\"column\\": 27
        },
        \\"end\\": null
      }
    }, {
      \\"type\\": 5,
      \\"staticId\\": 17,
      \\"parent\\": 15,
      \\"displayName\\": \\"f4\\",
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 18,
          \\"column\\": 39
        },
        \\"end\\": null
      }
    }, {
      \\"staticId\\": 18,
      \\"parent\\": 15,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 18,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 18,
          \\"column\\": 39
        }
      },
      \\"type\\": 4,
      \\"displayName\\": \\"(await Promise.all(args.map(...)\\",
      \\"resumeId\\": 17
    }, {
      \\"staticId\\": 19,
      \\"parent\\": 18,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 18,
          \\"column\\": 29
        },
        \\"end\\": {
          \\"line\\": 18,
          \\"column\\": 37
        }
      },
      \\"type\\": 3,
      \\"displayName\\": \\"(f => f())\\"
    }, {
      \\"staticId\\": 20,
      \\"parent\\": 19,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 18,
          \\"column\\": 29
        },
        \\"end\\": {
          \\"line\\": 18,
          \\"column\\": 37
        }
      },
      \\"type\\": 2,
      \\"displayName\\": \\"(anonymous)\\",
      \\"isInterruptable\\": false
    }, {
      \\"staticId\\": 21,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 21,
          \\"column\\": 1
        },
        \\"end\\": {
          \\"line\\": 24,
          \\"column\\": 1
        }
      },
      \\"type\\": 2,
      \\"name\\": \\"main\\",
      \\"displayName\\": \\"main\\",
      \\"isInterruptable\\": true
    }, {
      \\"type\\": 5,
      \\"staticId\\": 22,
      \\"parent\\": 21,
      \\"displayName\\": \\"main\\",
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 21,
          \\"column\\": 23
        },
        \\"end\\": null
      }
    }, {
      \\"type\\": 5,
      \\"staticId\\": 23,
      \\"parent\\": 21,
      \\"displayName\\": \\"main\\",
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 22,
          \\"column\\": 12
        },
        \\"end\\": null
      }
    }, {
      \\"staticId\\": 24,
      \\"parent\\": 21,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 22,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 22,
          \\"column\\": 12
        }
      },
      \\"type\\": 4,
      \\"displayName\\": \\"(await f1())\\",
      \\"resumeId\\": 23
    }, {
      \\"type\\": 5,
      \\"staticId\\": 25,
      \\"parent\\": 21,
      \\"displayName\\": \\"main\\",
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 23,
          \\"column\\": 41
        },
        \\"end\\": null
      }
    }, {
      \\"staticId\\": 26,
      \\"parent\\": 21,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 23,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 23,
          \\"column\\": 41
        }
      },
      \\"type\\": 4,
      \\"displayName\\": \\"(await f4(f2, f3, sleep.bind...)\\",
      \\"resumeId\\": 25
    }],
    \\"traces\\": [null, {
      \\"displayName\\": \\"async function sleep(ms) {...\\",
      \\"traceId\\": 1,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 1,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 3,
          \\"column\\": 1
        }
      }
    }, {
      \\"displayName\\": \\"return new Promise(r => set...\\",
      \\"traceId\\": 2,
      \\"parent\\": 2,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 2,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 2,
          \\"column\\": 45
        }
      }
    }, {
      \\"displayName\\": \\"setTimeout(r, ms)\\",
      \\"traceId\\": 3,
      \\"parent\\": 4,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 2,
          \\"column\\": 26
        },
        \\"end\\": {
          \\"line\\": 2,
          \\"column\\": 43
        }
      }
    }, {
      \\"displayName\\": \\"function f1() {  const _co...\\",
      \\"traceId\\": 4,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 5,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 7,
          \\"column\\": 1
        }
      }
    }, {
      \\"displayName\\": \\"return sleep(100);\\",
      \\"traceId\\": 5,
      \\"parent\\": 6,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 6,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 6,
          \\"column\\": 20
        }
      }
    }, {
      \\"displayName\\": \\"sleep(100)\\",
      \\"traceId\\": 6,
      \\"parent\\": 6,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 6,
          \\"column\\": 9
        },
        \\"end\\": {
          \\"line\\": 6,
          \\"column\\": 19
        }
      }
    }, {
      \\"displayName\\": \\"async function f2() {  con...\\",
      \\"traceId\\": 7,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 9,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 11,
          \\"column\\": 1
        }
      }
    }, {
      \\"displayName\\": \\"await sleep(100)\\",
      \\"traceId\\": 8,
      \\"parent\\": 7,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 10,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 10,
          \\"column\\": 18
        }
      }
    }, {
      \\"displayName\\": \\"sleep(100)\\",
      \\"traceId\\": 9,
      \\"parent\\": 10,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 10,
          \\"column\\": 8
        },
        \\"end\\": {
          \\"line\\": 10,
          \\"column\\": 18
        }
      }
    }, {
      \\"displayName\\": \\"async function f3() {  con...\\",
      \\"traceId\\": 10,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 13,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 15,
          \\"column\\": 1
        }
      }
    }, {
      \\"displayName\\": \\"await sleep(200)\\",
      \\"traceId\\": 11,
      \\"parent\\": 11,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 14,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 14,
          \\"column\\": 18
        }
      }
    }, {
      \\"displayName\\": \\"sleep(200)\\",
      \\"traceId\\": 12,
      \\"parent\\": 14,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 14,
          \\"column\\": 8
        },
        \\"end\\": {
          \\"line\\": 14,
          \\"column\\": 18
        }
      }
    }, {
      \\"displayName\\": \\"async function f4(...args)...\\",
      \\"traceId\\": 13,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 17,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 19,
          \\"column\\": 1
        }
      }
    }, {
      \\"displayName\\": \\"await Promise.all(args.map(...\\",
      \\"traceId\\": 14,
      \\"parent\\": 15,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 18,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 18,
          \\"column\\": 39
        }
      }
    }, {
      \\"displayName\\": \\"Promise.all(args.map(f => f...\\",
      \\"traceId\\": 15,
      \\"parent\\": 18,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 18,
          \\"column\\": 8
        },
        \\"end\\": {
          \\"line\\": 18,
          \\"column\\": 39
        }
      }
    }, {
      \\"displayName\\": \\"args.map(f => f())\\",
      \\"traceId\\": 16,
      \\"parent\\": 18,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 18,
          \\"column\\": 20
        },
        \\"end\\": {
          \\"line\\": 18,
          \\"column\\": 38
        }
      }
    }, {
      \\"displayName\\": \\"f()\\",
      \\"traceId\\": 17,
      \\"parent\\": 20,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 18,
          \\"column\\": 34
        },
        \\"end\\": {
          \\"line\\": 18,
          \\"column\\": 37
        }
      }
    }, {
      \\"displayName\\": \\"async function main() {  a...\\",
      \\"traceId\\": 18,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 21,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 24,
          \\"column\\": 4
        }
      }
    }, {
      \\"displayName\\": \\"await f1()\\",
      \\"traceId\\": 19,
      \\"parent\\": 21,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 22,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 22,
          \\"column\\": 12
        }
      }
    }, {
      \\"displayName\\": \\"f1()\\",
      \\"traceId\\": 20,
      \\"parent\\": 24,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 22,
          \\"column\\": 8
        },
        \\"end\\": {
          \\"line\\": 22,
          \\"column\\": 12
        }
      }
    }, {
      \\"displayName\\": \\"await f4(f2, f3, sleep.bind...\\",
      \\"traceId\\": 21,
      \\"parent\\": 21,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 23,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 23,
          \\"column\\": 41
        }
      }
    }, {
      \\"displayName\\": \\"f4(f2, f3, sleep.bind(null,...\\",
      \\"traceId\\": 22,
      \\"parent\\": 26,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 23,
          \\"column\\": 8
        },
        \\"end\\": {
          \\"line\\": 23,
          \\"column\\": 41
        }
      }
    }, {
      \\"displayName\\": \\"sleep.bind(null, 400)\\",
      \\"traceId\\": 23,
      \\"parent\\": 26,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 23,
          \\"column\\": 19
        },
        \\"end\\": {
          \\"line\\": 23,
          \\"column\\": 40
        }
      }
    }]
  });
}
"
`;

exports[`dbux-babel-plugin example1.es5.js: example1.es5.js 1`] = `
"
function f1(x,y) {
}

class A {
  constructor() {
    this.m = new Map();
    this.s = new Set();
  }

  getX() {}
}

const f2 = (z,w) => {};

export {
  f1,
  A,
  f2
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

require(\\"core-js/modules/es.array.iterator\\");

require(\\"core-js/modules/es.map\\");

require(\\"core-js/modules/es.object.to-string\\");

require(\\"core-js/modules/es.set\\");

require(\\"core-js/modules/es.string.iterator\\");

require(\\"core-js/modules/web.dom-collections.iterator\\");

exports.__esModule = true;
exports.f2 = exports.A = exports.f1 = void 0;

var _dbuxRuntime = require('dbux-runtime')[\\"default\\"];

var _dbux = _dbux_init(_dbuxRuntime);

var _contextId = _dbux.getProgramContextId();

var _f, _A, _f2;

exports.f2 = _f2;
exports.A = _A;
exports.f1 = _f;

try {
  var f1 = function f1(x, y) {
    var _contextId2 = _dbux.pushImmediate(2);

    try {} finally {
      _dbux.popImmediate(_contextId2);
    }
  };

  _dbux.t(1);

  _dbux.t(2);

  var A =
  /*#__PURE__*/
  function () {
    function A() {
      var _contextId3 = _dbux.pushImmediate(3);

      try {
        this.m = (_dbux.t(3), _dbux.tv(3, new Map()));
        this.s = (_dbux.t(4), _dbux.tv(4, new Set()));
      } finally {
        _dbux.popImmediate(_contextId3);
      }
    }

    var _proto = A.prototype;

    _proto.getX = function getX() {
      var _contextId4 = _dbux.pushImmediate(4);

      try {} finally {
        _dbux.popImmediate(_contextId4);
      }
    };

    return A;
  }();

  _dbux.t(5);

  var f2 = (_dbux.t(6), _dbux.tv(6, function (z, w) {
    var _contextId5 = _dbux.pushImmediate(5);

    try {} finally {
      _dbux.popImmediate(_contextId5);
    }
  }));
  exports.f1 = _f = f1;
  exports.A = _A = A;
  exports.f2 = _f2 = f2;
} finally {
  _dbux.popProgram();
}

function _dbux_init(dbuxRuntime) {
  return dbuxRuntime.initProgram({
    \\"fileName\\": \\"example1.js\\",
    \\"filePath\\": \\"/Users/domi/code/dbux/samples/__samplesInput__/example1.js\\",
    \\"staticContexts\\": [null, {
      \\"staticId\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 1,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 19,
          \\"column\\": 1
        }
      },
      \\"type\\": 1,
      \\"name\\": \\"Program\\",
      \\"displayName\\": \\"Program\\"
    }, {
      \\"staticId\\": 2,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 1,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 2,
          \\"column\\": 1
        }
      },
      \\"type\\": 2,
      \\"name\\": \\"f1\\",
      \\"displayName\\": \\"f1\\",
      \\"isInterruptable\\": false
    }, {
      \\"staticId\\": 3,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 5,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 8,
          \\"column\\": 3
        }
      },
      \\"type\\": 2,
      \\"name\\": \\"constructor\\",
      \\"displayName\\": \\"A.constructor\\",
      \\"isInterruptable\\": false
    }, {
      \\"staticId\\": 4,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 10,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 10,
          \\"column\\": 11
        }
      },
      \\"type\\": 2,
      \\"name\\": \\"getX\\",
      \\"displayName\\": \\"A.getX\\",
      \\"isInterruptable\\": false
    }, {
      \\"staticId\\": 5,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 13,
          \\"column\\": 11
        },
        \\"end\\": {
          \\"line\\": 13,
          \\"column\\": 22
        }
      },
      \\"type\\": 2,
      \\"displayName\\": \\"(anonymous)\\",
      \\"isInterruptable\\": false
    }],
    \\"traces\\": [null, {
      \\"displayName\\": \\"function f1(x, y) {  const...\\",
      \\"traceId\\": 1,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 1,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 2,
          \\"column\\": 1
        }
      }
    }, {
      \\"displayName\\": \\"class A {  constructor() {...\\",
      \\"traceId\\": 2,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 4,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 11,
          \\"column\\": 1
        }
      }
    }, {
      \\"displayName\\": \\"new Map()\\",
      \\"traceId\\": 3,
      \\"parent\\": 3,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 6,
          \\"column\\": 13
        },
        \\"end\\": {
          \\"line\\": 6,
          \\"column\\": 22
        }
      }
    }, {
      \\"displayName\\": \\"new Set()\\",
      \\"traceId\\": 4,
      \\"parent\\": 3,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 7,
          \\"column\\": 13
        },
        \\"end\\": {
          \\"line\\": 7,
          \\"column\\": 22
        }
      }
    }, {
      \\"displayName\\": \\"const f2 = (z, w) => {};\\",
      \\"traceId\\": 5,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 13,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 13,
          \\"column\\": 23
        }
      }
    }, {
      \\"displayName\\": \\"(z, w) => {}\\",
      \\"traceId\\": 6,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 13,
          \\"column\\": 11
        },
        \\"end\\": {
          \\"line\\": 13,
          \\"column\\": 22
        }
      }
    }]
  });
}
"
`;

exports[`dbux-babel-plugin example1.esNext.js: example1.esNext.js 1`] = `
"
function f1(x,y) {
}

class A {
  constructor() {
    this.m = new Map();
    this.s = new Set();
  }

  getX() {}
}

const f2 = (z,w) => {};

export {
  f1,
  A,
  f2
}

      ↓ ↓ ↓ ↓ ↓ ↓

const _dbuxRuntime = require('dbux-runtime').default;

const _dbux = _dbux_init(_dbuxRuntime);

const _contextId = _dbux.getProgramContextId();

let _f, _A, _f2;

try {
  _dbux.t(1);

  function f1(x, y) {
    const _contextId2 = _dbux.pushImmediate(2);

    try {} finally {
      _dbux.popImmediate(_contextId2);
    }
  }

  _dbux.t(2);

  class A {
    constructor() {
      const _contextId3 = _dbux.pushImmediate(3);

      try {
        this.m = (_dbux.t(3), _dbux.tv(3, new Map()));
        this.s = (_dbux.t(4), _dbux.tv(4, new Set()));
      } finally {
        _dbux.popImmediate(_contextId3);
      }
    }

    getX() {
      const _contextId4 = _dbux.pushImmediate(4);

      try {} finally {
        _dbux.popImmediate(_contextId4);
      }
    }

  }

  _dbux.t(5);

  const f2 = (_dbux.t(6), _dbux.tv(6, (z, w) => {
    const _contextId5 = _dbux.pushImmediate(5);

    try {} finally {
      _dbux.popImmediate(_contextId5);
    }
  }));
  _f = f1;
  _A = A;
  _f2 = f2;
} finally {
  _dbux.popProgram();
}

export { _f as f1, _A as A, _f2 as f2 };

function _dbux_init(dbuxRuntime) {
  return dbuxRuntime.initProgram({
    \\"fileName\\": \\"example1.js\\",
    \\"filePath\\": \\"/Users/domi/code/dbux/samples/__samplesInput__/example1.js\\",
    \\"staticContexts\\": [null, {
      \\"staticId\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 1,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 19,
          \\"column\\": 1
        }
      },
      \\"type\\": 1,
      \\"name\\": \\"Program\\",
      \\"displayName\\": \\"Program\\"
    }, {
      \\"staticId\\": 2,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 1,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 2,
          \\"column\\": 1
        }
      },
      \\"type\\": 2,
      \\"name\\": \\"f1\\",
      \\"displayName\\": \\"f1\\",
      \\"isInterruptable\\": false
    }, {
      \\"staticId\\": 3,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 5,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 8,
          \\"column\\": 3
        }
      },
      \\"type\\": 2,
      \\"name\\": \\"constructor\\",
      \\"displayName\\": \\"A.constructor\\",
      \\"isInterruptable\\": false
    }, {
      \\"staticId\\": 4,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 10,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 10,
          \\"column\\": 11
        }
      },
      \\"type\\": 2,
      \\"name\\": \\"getX\\",
      \\"displayName\\": \\"A.getX\\",
      \\"isInterruptable\\": false
    }, {
      \\"staticId\\": 5,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 13,
          \\"column\\": 11
        },
        \\"end\\": {
          \\"line\\": 13,
          \\"column\\": 22
        }
      },
      \\"type\\": 2,
      \\"displayName\\": \\"(anonymous)\\",
      \\"isInterruptable\\": false
    }],
    \\"traces\\": [null, {
      \\"displayName\\": \\"function f1(x, y) {  const...\\",
      \\"traceId\\": 1,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 1,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 2,
          \\"column\\": 1
        }
      }
    }, {
      \\"displayName\\": \\"class A {  constructor() {...\\",
      \\"traceId\\": 2,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 4,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 11,
          \\"column\\": 1
        }
      }
    }, {
      \\"displayName\\": \\"new Map()\\",
      \\"traceId\\": 3,
      \\"parent\\": 3,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 6,
          \\"column\\": 13
        },
        \\"end\\": {
          \\"line\\": 6,
          \\"column\\": 22
        }
      }
    }, {
      \\"displayName\\": \\"new Set()\\",
      \\"traceId\\": 4,
      \\"parent\\": 3,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 7,
          \\"column\\": 13
        },
        \\"end\\": {
          \\"line\\": 7,
          \\"column\\": 22
        }
      }
    }, {
      \\"displayName\\": \\"const f2 = (z, w) => {};\\",
      \\"traceId\\": 5,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 13,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 13,
          \\"column\\": 23
        }
      }
    }, {
      \\"displayName\\": \\"(z, w) => {}\\",
      \\"traceId\\": 6,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 13,
          \\"column\\": 11
        },
        \\"end\\": {
          \\"line\\": 13,
          \\"column\\": 22
        }
      }
    }]
  });
}
"
`;

exports[`dbux-babel-plugin example2.es5.js: example2.es5.js 1`] = `
"
import { A } from './example1';

(function main() {
  console.log(new A());
})();

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _example = require(\\"./example1\\");

var _dbuxRuntime = require('dbux-runtime')[\\"default\\"];

var _dbux = _dbux_init(_dbuxRuntime);

var _contextId = _dbux.getProgramContextId();

try {
  _dbux.t(1), _dbux.tv(1, function main() {
    var _contextId2 = _dbux.pushImmediate(2);

    try {
      _dbux.t(2), _dbux.tv(2, console.log(new _example.A()));
    } finally {
      _dbux.popImmediate(_contextId2);
    }
  }());
} finally {
  _dbux.popProgram();
}

function _dbux_init(dbuxRuntime) {
  return dbuxRuntime.initProgram({
    \\"fileName\\": \\"example2.js\\",
    \\"filePath\\": \\"/Users/domi/code/dbux/samples/__samplesInput__/example2.js\\",
    \\"staticContexts\\": [null, {
      \\"staticId\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 1,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 5,
          \\"column\\": 5
        }
      },
      \\"type\\": 1,
      \\"name\\": \\"Program\\",
      \\"displayName\\": \\"Program\\"
    }, {
      \\"staticId\\": 2,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 3,
          \\"column\\": 1
        },
        \\"end\\": {
          \\"line\\": 5,
          \\"column\\": 1
        }
      },
      \\"type\\": 2,
      \\"name\\": \\"main\\",
      \\"displayName\\": \\"main\\",
      \\"isInterruptable\\": false
    }],
    \\"traces\\": [null, {
      \\"displayName\\": \\"function main() {  console...\\",
      \\"traceId\\": 1,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 3,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 5,
          \\"column\\": 4
        }
      }
    }, {
      \\"displayName\\": \\"console.log(new A())\\",
      \\"traceId\\": 2,
      \\"parent\\": 2,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 4,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 4,
          \\"column\\": 22
        }
      }
    }]
  });
}
"
`;

exports[`dbux-babel-plugin example2.esNext.js: example2.esNext.js 1`] = `
"
import { A } from './example1';

(function main() {
  console.log(new A());
})();

      ↓ ↓ ↓ ↓ ↓ ↓

import { A } from './example1';

const _dbuxRuntime = require('dbux-runtime').default;

const _dbux = _dbux_init(_dbuxRuntime);

const _contextId = _dbux.getProgramContextId();

try {
  _dbux.t(1), _dbux.tv(1, function main() {
    const _contextId2 = _dbux.pushImmediate(2);

    try {
      _dbux.t(2), _dbux.tv(2, console.log(new A()));
    } finally {
      _dbux.popImmediate(_contextId2);
    }
  }());
} finally {
  _dbux.popProgram();
}

function _dbux_init(dbuxRuntime) {
  return dbuxRuntime.initProgram({
    \\"fileName\\": \\"example2.js\\",
    \\"filePath\\": \\"/Users/domi/code/dbux/samples/__samplesInput__/example2.js\\",
    \\"staticContexts\\": [null, {
      \\"staticId\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 1,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 5,
          \\"column\\": 5
        }
      },
      \\"type\\": 1,
      \\"name\\": \\"Program\\",
      \\"displayName\\": \\"Program\\"
    }, {
      \\"staticId\\": 2,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 3,
          \\"column\\": 1
        },
        \\"end\\": {
          \\"line\\": 5,
          \\"column\\": 1
        }
      },
      \\"type\\": 2,
      \\"name\\": \\"main\\",
      \\"displayName\\": \\"main\\",
      \\"isInterruptable\\": false
    }],
    \\"traces\\": [null, {
      \\"displayName\\": \\"function main() {  console...\\",
      \\"traceId\\": 1,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 3,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 5,
          \\"column\\": 4
        }
      }
    }, {
      \\"displayName\\": \\"console.log(new A())\\",
      \\"traceId\\": 2,
      \\"parent\\": 2,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 4,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 4,
          \\"column\\": 22
        }
      }
    }]
  });
}
"
`;

exports[`dbux-babel-plugin example3.es5.js: example3.es5.js 1`] = `
"
function f1() {

}

function f2() {
  f1();
  f1();
}


f2();

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _dbuxRuntime = require('dbux-runtime')[\\"default\\"];

var _dbux = _dbux_init(_dbuxRuntime);

var _contextId = _dbux.getProgramContextId();

try {
  var f1 = function f1() {
    var _contextId2 = _dbux.pushImmediate(2);

    try {} finally {
      _dbux.popImmediate(_contextId2);
    }
  };

  var f2 = function f2() {
    var _contextId3 = _dbux.pushImmediate(3);

    try {
      _dbux.t(3), _dbux.tv(3, f1());
      _dbux.t(4), _dbux.tv(4, f1());
    } finally {
      _dbux.popImmediate(_contextId3);
    }
  };

  _dbux.t(1);

  _dbux.t(2);

  _dbux.t(5), _dbux.tv(5, f2());
} finally {
  _dbux.popProgram();
}

function _dbux_init(dbuxRuntime) {
  return dbuxRuntime.initProgram({
    \\"fileName\\": \\"example3.js\\",
    \\"filePath\\": \\"/Users/domi/code/dbux/samples/__samplesInput__/example3.js\\",
    \\"staticContexts\\": [null, {
      \\"staticId\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 1,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 11,
          \\"column\\": 5
        }
      },
      \\"type\\": 1,
      \\"name\\": \\"Program\\",
      \\"displayName\\": \\"Program\\"
    }, {
      \\"staticId\\": 2,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 1,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 3,
          \\"column\\": 1
        }
      },
      \\"type\\": 2,
      \\"name\\": \\"f1\\",
      \\"displayName\\": \\"f1\\",
      \\"isInterruptable\\": false
    }, {
      \\"staticId\\": 3,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 5,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 8,
          \\"column\\": 1
        }
      },
      \\"type\\": 2,
      \\"name\\": \\"f2\\",
      \\"displayName\\": \\"f2\\",
      \\"isInterruptable\\": false
    }],
    \\"traces\\": [null, {
      \\"displayName\\": \\"function f1() {  const _co...\\",
      \\"traceId\\": 1,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 1,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 3,
          \\"column\\": 1
        }
      }
    }, {
      \\"displayName\\": \\"function f2() {  const _co...\\",
      \\"traceId\\": 2,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 5,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 8,
          \\"column\\": 1
        }
      }
    }, {
      \\"displayName\\": \\"f1()\\",
      \\"traceId\\": 3,
      \\"parent\\": 3,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 6,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 6,
          \\"column\\": 6
        }
      }
    }, {
      \\"displayName\\": \\"f1()\\",
      \\"traceId\\": 4,
      \\"parent\\": 3,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 7,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 7,
          \\"column\\": 6
        }
      }
    }, {
      \\"displayName\\": \\"f2()\\",
      \\"traceId\\": 5,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 11,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 11,
          \\"column\\": 4
        }
      }
    }]
  });
}
"
`;

exports[`dbux-babel-plugin example3.esNext.js: example3.esNext.js 1`] = `
"
function f1() {

}

function f2() {
  f1();
  f1();
}


f2();

      ↓ ↓ ↓ ↓ ↓ ↓

const _dbuxRuntime = require('dbux-runtime').default;

const _dbux = _dbux_init(_dbuxRuntime);

const _contextId = _dbux.getProgramContextId();

try {
  _dbux.t(1);

  function f1() {
    const _contextId2 = _dbux.pushImmediate(2);

    try {} finally {
      _dbux.popImmediate(_contextId2);
    }
  }

  _dbux.t(2);

  function f2() {
    const _contextId3 = _dbux.pushImmediate(3);

    try {
      _dbux.t(3), _dbux.tv(3, f1());
      _dbux.t(4), _dbux.tv(4, f1());
    } finally {
      _dbux.popImmediate(_contextId3);
    }
  }

  _dbux.t(5), _dbux.tv(5, f2());
} finally {
  _dbux.popProgram();
}

function _dbux_init(dbuxRuntime) {
  return dbuxRuntime.initProgram({
    \\"fileName\\": \\"example3.js\\",
    \\"filePath\\": \\"/Users/domi/code/dbux/samples/__samplesInput__/example3.js\\",
    \\"staticContexts\\": [null, {
      \\"staticId\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 1,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 11,
          \\"column\\": 5
        }
      },
      \\"type\\": 1,
      \\"name\\": \\"Program\\",
      \\"displayName\\": \\"Program\\"
    }, {
      \\"staticId\\": 2,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 1,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 3,
          \\"column\\": 1
        }
      },
      \\"type\\": 2,
      \\"name\\": \\"f1\\",
      \\"displayName\\": \\"f1\\",
      \\"isInterruptable\\": false
    }, {
      \\"staticId\\": 3,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 5,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 8,
          \\"column\\": 1
        }
      },
      \\"type\\": 2,
      \\"name\\": \\"f2\\",
      \\"displayName\\": \\"f2\\",
      \\"isInterruptable\\": false
    }],
    \\"traces\\": [null, {
      \\"displayName\\": \\"function f1() {  const _co...\\",
      \\"traceId\\": 1,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 1,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 3,
          \\"column\\": 1
        }
      }
    }, {
      \\"displayName\\": \\"function f2() {  const _co...\\",
      \\"traceId\\": 2,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 5,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 8,
          \\"column\\": 1
        }
      }
    }, {
      \\"displayName\\": \\"f1()\\",
      \\"traceId\\": 3,
      \\"parent\\": 3,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 6,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 6,
          \\"column\\": 6
        }
      }
    }, {
      \\"displayName\\": \\"f1()\\",
      \\"traceId\\": 4,
      \\"parent\\": 3,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 7,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 7,
          \\"column\\": 6
        }
      }
    }, {
      \\"displayName\\": \\"f2()\\",
      \\"traceId\\": 5,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 11,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 11,
          \\"column\\": 4
        }
      }
    }]
  });
}
"
`;

exports[`dbux-babel-plugin setTimeout1.es5.js: setTimeout1.es5.js 1`] = `
"
function f1(a, b) {
  setTimeout(function f2() {
    setTimeout(f3, 300);
  });
}

function f3() {
  f4(1, (...args) => console.log(...args), 2, () => {return 1;});
}

function f4(a, cb, b, cb2) {
  cb(a, b);
  cb2();
}

// go!
setTimeout(f1.bind(null, 83, 84));

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

require(\\"core-js/modules/es.function.bind\\");

require(\\"core-js/modules/web.timers\\");

var _dbuxRuntime = require('dbux-runtime')[\\"default\\"];

var _dbux = _dbux_init(_dbuxRuntime);

var _contextId = _dbux.getProgramContextId();

try {
  var f1 = function f1(a, b) {
    var _contextId2 = _dbux.pushImmediate(2);

    try {
      _dbux.t(2), _dbux.tv(2, setTimeout(_dbux.scheduleCallback(3, _contextId2, function f2() {
        var _contextId3 = _dbux.pushImmediate(4);

        try {
          _dbux.t(3), _dbux.tv(3, setTimeout(_dbux.scheduleCallback(5, _contextId3, f3), 300));
        } finally {
          _dbux.popImmediate(_contextId3);
        }
      })));
    } finally {
      _dbux.popImmediate(_contextId2);
    }
  };

  var f3 = function f3() {
    var _contextId4 = _dbux.pushImmediate(6);

    try {
      _dbux.t(5), _dbux.tv(5, f4(1, _dbux.scheduleCallback(7, _contextId4, function () {
        var _contextId5 = _dbux.pushImmediate(9);

        try {
          var _console;

          return _dbux.t(6), _dbux.tv(6, (_console = console).log.apply(_console, arguments));
        } finally {
          _dbux.popImmediate(_contextId5);
        }
      }), 2, _dbux.scheduleCallback(8, _contextId4, function () {
        var _contextId6 = _dbux.pushImmediate(10);

        try {
          _dbux.t(7);

          return 1;
        } finally {
          _dbux.popImmediate(_contextId6);
        }
      })));
    } finally {
      _dbux.popImmediate(_contextId4);
    }
  };

  var f4 = function f4(a, cb, b, cb2) {
    var _contextId7 = _dbux.pushImmediate(11);

    try {
      _dbux.t(9), _dbux.tv(9, cb(a, b));
      _dbux.t(10), _dbux.tv(10, cb2());
    } finally {
      _dbux.popImmediate(_contextId7);
    }
  }; // go!


  _dbux.t(1);

  _dbux.t(4);

  _dbux.t(8);

  _dbux.t(11), _dbux.tv(11, setTimeout(_dbux.scheduleCallback(12, _contextId, (_dbux.t(12), _dbux.tv(12, f1.bind(null, 83, 84))))));
} finally {
  _dbux.popProgram();
}

function _dbux_init(dbuxRuntime) {
  return dbuxRuntime.initProgram({
    \\"fileName\\": \\"setTimeout1.js\\",
    \\"filePath\\": \\"/Users/domi/code/dbux/samples/__samplesInput__/setTimeout1.js\\",
    \\"staticContexts\\": [null, {
      \\"staticId\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 1,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 17,
          \\"column\\": 34
        }
      },
      \\"type\\": 1,
      \\"name\\": \\"Program\\",
      \\"displayName\\": \\"Program\\"
    }, {
      \\"staticId\\": 2,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 1,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 5,
          \\"column\\": 1
        }
      },
      \\"type\\": 2,
      \\"name\\": \\"f1\\",
      \\"displayName\\": \\"f1\\",
      \\"isInterruptable\\": false
    }, {
      \\"staticId\\": 3,
      \\"parent\\": 2,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 2,
          \\"column\\": 13
        },
        \\"end\\": {
          \\"line\\": 4,
          \\"column\\": 3
        }
      },
      \\"type\\": 3,
      \\"displayName\\": \\"(function f2() {  setTimeou...)\\"
    }, {
      \\"staticId\\": 4,
      \\"parent\\": 3,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 2,
          \\"column\\": 13
        },
        \\"end\\": {
          \\"line\\": 4,
          \\"column\\": 3
        }
      },
      \\"type\\": 2,
      \\"name\\": \\"f2\\",
      \\"displayName\\": \\"f2\\",
      \\"isInterruptable\\": false
    }, {
      \\"staticId\\": 5,
      \\"parent\\": 4,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 3,
          \\"column\\": 15
        },
        \\"end\\": {
          \\"line\\": 3,
          \\"column\\": 17
        },
        \\"identifierName\\": \\"f3\\"
      },
      \\"type\\": 3,
      \\"displayName\\": \\"(f3)\\"
    }, {
      \\"staticId\\": 6,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 7,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 9,
          \\"column\\": 1
        }
      },
      \\"type\\": 2,
      \\"name\\": \\"f3\\",
      \\"displayName\\": \\"f3\\",
      \\"isInterruptable\\": false
    }, {
      \\"staticId\\": 7,
      \\"parent\\": 6,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 8,
          \\"column\\": 8
        },
        \\"end\\": {
          \\"line\\": 8,
          \\"column\\": 41
        }
      },
      \\"type\\": 3,
      \\"displayName\\": \\"((...args) => console.log(.....)\\"
    }, {
      \\"staticId\\": 8,
      \\"parent\\": 6,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 8,
          \\"column\\": 46
        },
        \\"end\\": {
          \\"line\\": 8,
          \\"column\\": 63
        }
      },
      \\"type\\": 3,
      \\"displayName\\": \\"(() => {  return 1;})\\"
    }, {
      \\"staticId\\": 9,
      \\"parent\\": 7,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 8,
          \\"column\\": 8
        },
        \\"end\\": {
          \\"line\\": 8,
          \\"column\\": 41
        }
      },
      \\"type\\": 2,
      \\"displayName\\": \\"(anonymous)\\",
      \\"isInterruptable\\": false
    }, {
      \\"staticId\\": 10,
      \\"parent\\": 8,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 8,
          \\"column\\": 46
        },
        \\"end\\": {
          \\"line\\": 8,
          \\"column\\": 63
        }
      },
      \\"type\\": 2,
      \\"displayName\\": \\"(anonymous)\\",
      \\"isInterruptable\\": false
    }, {
      \\"staticId\\": 11,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 11,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 14,
          \\"column\\": 1
        }
      },
      \\"type\\": 2,
      \\"name\\": \\"f4\\",
      \\"displayName\\": \\"f4\\",
      \\"isInterruptable\\": false
    }, {
      \\"staticId\\": 12,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 17,
          \\"column\\": 11
        },
        \\"end\\": {
          \\"line\\": 17,
          \\"column\\": 32
        }
      },
      \\"type\\": 3,
      \\"displayName\\": \\"(f1.bind(null, 83, 84))\\"
    }],
    \\"traces\\": [null, {
      \\"displayName\\": \\"function f1(a, b) {  const...\\",
      \\"traceId\\": 1,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 1,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 5,
          \\"column\\": 1
        }
      }
    }, {
      \\"displayName\\": \\"setTimeout(function f2() {...\\",
      \\"traceId\\": 2,
      \\"parent\\": 2,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 2,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 4,
          \\"column\\": 4
        }
      }
    }, {
      \\"displayName\\": \\"setTimeout(f3, 300)\\",
      \\"traceId\\": 3,
      \\"parent\\": 4,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 3,
          \\"column\\": 4
        },
        \\"end\\": {
          \\"line\\": 3,
          \\"column\\": 23
        }
      }
    }, {
      \\"displayName\\": \\"function f3() {  const _co...\\",
      \\"traceId\\": 4,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 7,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 9,
          \\"column\\": 1
        }
      }
    }, {
      \\"displayName\\": \\"f4(1, (...args) => console....\\",
      \\"traceId\\": 5,
      \\"parent\\": 6,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 8,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 8,
          \\"column\\": 64
        }
      }
    }, {
      \\"displayName\\": \\"console.log(...args)\\",
      \\"traceId\\": 6,
      \\"parent\\": 9,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 8,
          \\"column\\": 21
        },
        \\"end\\": {
          \\"line\\": 8,
          \\"column\\": 41
        }
      }
    }, {
      \\"displayName\\": \\"return 1;\\",
      \\"traceId\\": 7,
      \\"parent\\": 10,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 8,
          \\"column\\": 53
        },
        \\"end\\": {
          \\"line\\": 8,
          \\"column\\": 62
        }
      }
    }, {
      \\"displayName\\": \\"function f4(a, cb, b, cb2)...\\",
      \\"traceId\\": 8,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 11,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 14,
          \\"column\\": 1
        }
      }
    }, {
      \\"displayName\\": \\"cb(a, b)\\",
      \\"traceId\\": 9,
      \\"parent\\": 11,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 12,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 12,
          \\"column\\": 10
        }
      }
    }, {
      \\"displayName\\": \\"cb2()\\",
      \\"traceId\\": 10,
      \\"parent\\": 11,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 13,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 13,
          \\"column\\": 7
        }
      }
    }, {
      \\"displayName\\": \\"setTimeout(f1.bind(null, 83...\\",
      \\"traceId\\": 11,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 17,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 17,
          \\"column\\": 33
        }
      }
    }, {
      \\"displayName\\": \\"f1.bind(null, 83, 84)\\",
      \\"traceId\\": 12,
      \\"parent\\": 12,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 17,
          \\"column\\": 11
        },
        \\"end\\": {
          \\"line\\": 17,
          \\"column\\": 32
        }
      }
    }]
  });
}
"
`;

exports[`dbux-babel-plugin setTimeout1.esNext.js: setTimeout1.esNext.js 1`] = `
"
function f1(a, b) {
  setTimeout(function f2() {
    setTimeout(f3, 300);
  });
}

function f3() {
  f4(1, (...args) => console.log(...args), 2, () => {return 1;});
}

function f4(a, cb, b, cb2) {
  cb(a, b);
  cb2();
}

// go!
setTimeout(f1.bind(null, 83, 84));

      ↓ ↓ ↓ ↓ ↓ ↓

const _dbuxRuntime = require('dbux-runtime').default;

const _dbux = _dbux_init(_dbuxRuntime);

const _contextId = _dbux.getProgramContextId();

try {
  _dbux.t(1);

  function f1(a, b) {
    const _contextId2 = _dbux.pushImmediate(2);

    try {
      _dbux.t(2), _dbux.tv(2, setTimeout(_dbux.scheduleCallback(3, _contextId2, function f2() {
        const _contextId3 = _dbux.pushImmediate(4);

        try {
          _dbux.t(3), _dbux.tv(3, setTimeout(_dbux.scheduleCallback(5, _contextId3, f3), 300));
        } finally {
          _dbux.popImmediate(_contextId3);
        }
      })));
    } finally {
      _dbux.popImmediate(_contextId2);
    }
  }

  _dbux.t(4);

  function f3() {
    const _contextId4 = _dbux.pushImmediate(6);

    try {
      _dbux.t(5), _dbux.tv(5, f4(1, _dbux.scheduleCallback(7, _contextId4, (...args) => {
        const _contextId5 = _dbux.pushImmediate(9);

        try {
          return _dbux.t(6), _dbux.tv(6, console.log(...args));
        } finally {
          _dbux.popImmediate(_contextId5);
        }
      }), 2, _dbux.scheduleCallback(8, _contextId4, () => {
        const _contextId6 = _dbux.pushImmediate(10);

        try {
          _dbux.t(7);

          return 1;
        } finally {
          _dbux.popImmediate(_contextId6);
        }
      })));
    } finally {
      _dbux.popImmediate(_contextId4);
    }
  }

  _dbux.t(8);

  function f4(a, cb, b, cb2) {
    const _contextId7 = _dbux.pushImmediate(11);

    try {
      _dbux.t(9), _dbux.tv(9, cb(a, b));
      _dbux.t(10), _dbux.tv(10, cb2());
    } finally {
      _dbux.popImmediate(_contextId7);
    }
  } // go!


  _dbux.t(11), _dbux.tv(11, setTimeout(_dbux.scheduleCallback(12, _contextId, (_dbux.t(12), _dbux.tv(12, f1.bind(null, 83, 84))))));
} finally {
  _dbux.popProgram();
}

function _dbux_init(dbuxRuntime) {
  return dbuxRuntime.initProgram({
    \\"fileName\\": \\"setTimeout1.js\\",
    \\"filePath\\": \\"/Users/domi/code/dbux/samples/__samplesInput__/setTimeout1.js\\",
    \\"staticContexts\\": [null, {
      \\"staticId\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 1,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 17,
          \\"column\\": 34
        }
      },
      \\"type\\": 1,
      \\"name\\": \\"Program\\",
      \\"displayName\\": \\"Program\\"
    }, {
      \\"staticId\\": 2,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 1,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 5,
          \\"column\\": 1
        }
      },
      \\"type\\": 2,
      \\"name\\": \\"f1\\",
      \\"displayName\\": \\"f1\\",
      \\"isInterruptable\\": false
    }, {
      \\"staticId\\": 3,
      \\"parent\\": 2,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 2,
          \\"column\\": 13
        },
        \\"end\\": {
          \\"line\\": 4,
          \\"column\\": 3
        }
      },
      \\"type\\": 3,
      \\"displayName\\": \\"(function f2() {  setTimeou...)\\"
    }, {
      \\"staticId\\": 4,
      \\"parent\\": 3,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 2,
          \\"column\\": 13
        },
        \\"end\\": {
          \\"line\\": 4,
          \\"column\\": 3
        }
      },
      \\"type\\": 2,
      \\"name\\": \\"f2\\",
      \\"displayName\\": \\"f2\\",
      \\"isInterruptable\\": false
    }, {
      \\"staticId\\": 5,
      \\"parent\\": 4,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 3,
          \\"column\\": 15
        },
        \\"end\\": {
          \\"line\\": 3,
          \\"column\\": 17
        },
        \\"identifierName\\": \\"f3\\"
      },
      \\"type\\": 3,
      \\"displayName\\": \\"(f3)\\"
    }, {
      \\"staticId\\": 6,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 7,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 9,
          \\"column\\": 1
        }
      },
      \\"type\\": 2,
      \\"name\\": \\"f3\\",
      \\"displayName\\": \\"f3\\",
      \\"isInterruptable\\": false
    }, {
      \\"staticId\\": 7,
      \\"parent\\": 6,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 8,
          \\"column\\": 8
        },
        \\"end\\": {
          \\"line\\": 8,
          \\"column\\": 41
        }
      },
      \\"type\\": 3,
      \\"displayName\\": \\"((...args) => console.log(.....)\\"
    }, {
      \\"staticId\\": 8,
      \\"parent\\": 6,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 8,
          \\"column\\": 46
        },
        \\"end\\": {
          \\"line\\": 8,
          \\"column\\": 63
        }
      },
      \\"type\\": 3,
      \\"displayName\\": \\"(() => {  return 1;})\\"
    }, {
      \\"staticId\\": 9,
      \\"parent\\": 7,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 8,
          \\"column\\": 8
        },
        \\"end\\": {
          \\"line\\": 8,
          \\"column\\": 41
        }
      },
      \\"type\\": 2,
      \\"displayName\\": \\"(anonymous)\\",
      \\"isInterruptable\\": false
    }, {
      \\"staticId\\": 10,
      \\"parent\\": 8,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 8,
          \\"column\\": 46
        },
        \\"end\\": {
          \\"line\\": 8,
          \\"column\\": 63
        }
      },
      \\"type\\": 2,
      \\"displayName\\": \\"(anonymous)\\",
      \\"isInterruptable\\": false
    }, {
      \\"staticId\\": 11,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 11,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 14,
          \\"column\\": 1
        }
      },
      \\"type\\": 2,
      \\"name\\": \\"f4\\",
      \\"displayName\\": \\"f4\\",
      \\"isInterruptable\\": false
    }, {
      \\"staticId\\": 12,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 17,
          \\"column\\": 11
        },
        \\"end\\": {
          \\"line\\": 17,
          \\"column\\": 32
        }
      },
      \\"type\\": 3,
      \\"displayName\\": \\"(f1.bind(null, 83, 84))\\"
    }],
    \\"traces\\": [null, {
      \\"displayName\\": \\"function f1(a, b) {  const...\\",
      \\"traceId\\": 1,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 1,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 5,
          \\"column\\": 1
        }
      }
    }, {
      \\"displayName\\": \\"setTimeout(function f2() {...\\",
      \\"traceId\\": 2,
      \\"parent\\": 2,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 2,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 4,
          \\"column\\": 4
        }
      }
    }, {
      \\"displayName\\": \\"setTimeout(f3, 300)\\",
      \\"traceId\\": 3,
      \\"parent\\": 4,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 3,
          \\"column\\": 4
        },
        \\"end\\": {
          \\"line\\": 3,
          \\"column\\": 23
        }
      }
    }, {
      \\"displayName\\": \\"function f3() {  const _co...\\",
      \\"traceId\\": 4,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 7,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 9,
          \\"column\\": 1
        }
      }
    }, {
      \\"displayName\\": \\"f4(1, (...args) => console....\\",
      \\"traceId\\": 5,
      \\"parent\\": 6,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 8,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 8,
          \\"column\\": 64
        }
      }
    }, {
      \\"displayName\\": \\"console.log(...args)\\",
      \\"traceId\\": 6,
      \\"parent\\": 9,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 8,
          \\"column\\": 21
        },
        \\"end\\": {
          \\"line\\": 8,
          \\"column\\": 41
        }
      }
    }, {
      \\"displayName\\": \\"return 1;\\",
      \\"traceId\\": 7,
      \\"parent\\": 10,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 8,
          \\"column\\": 53
        },
        \\"end\\": {
          \\"line\\": 8,
          \\"column\\": 62
        }
      }
    }, {
      \\"displayName\\": \\"function f4(a, cb, b, cb2)...\\",
      \\"traceId\\": 8,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 11,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 14,
          \\"column\\": 1
        }
      }
    }, {
      \\"displayName\\": \\"cb(a, b)\\",
      \\"traceId\\": 9,
      \\"parent\\": 11,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 12,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 12,
          \\"column\\": 10
        }
      }
    }, {
      \\"displayName\\": \\"cb2()\\",
      \\"traceId\\": 10,
      \\"parent\\": 11,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 13,
          \\"column\\": 2
        },
        \\"end\\": {
          \\"line\\": 13,
          \\"column\\": 7
        }
      }
    }, {
      \\"displayName\\": \\"setTimeout(f1.bind(null, 83...\\",
      \\"traceId\\": 11,
      \\"parent\\": 1,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 17,
          \\"column\\": 0
        },
        \\"end\\": {
          \\"line\\": 17,
          \\"column\\": 33
        }
      }
    }, {
      \\"displayName\\": \\"f1.bind(null, 83, 84)\\",
      \\"traceId\\": 12,
      \\"parent\\": 12,
      \\"loc\\": {
        \\"start\\": {
          \\"line\\": 17,
          \\"column\\": 11
        },
        \\"end\\": {
          \\"line\\": 17,
          \\"column\\": 32
        }
      }
    }]
  });
}
"
`;
