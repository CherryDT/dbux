{
	// Place your dbux workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	
	"Comment Barrier 1": {
		"prefix": "comment-barrier1",
		"body": [
			"/** ###########################################################################",
			" * $1",
			" */ ###########################################################################$0"
		],
		"scope": "javascript,typescript"
	},
	"Comment Barrier 2": {
		"prefix": "comment-barrier2",
		"body": [
			"/** ########################################",
			" * $1",
			" */ ########################################$0"
		],
		"scope": "javascript,typescript"
	},
	
	"Comment Barrier 1: css": {
		"prefix": "comment-barrier1",
		"body": [
			"/** ###########################################################################",
			" * $1",
			" * ############################################################################ */$0"
		],
		"scope": "css,scss"
	},
	"Comment Barrier 2: css": {
		"prefix": "comment-barrier2",
		"body": [
			"/** #######################################",
			" * $1",
			" * ######################################## */$0"
		],
		"scope": "css,scss"
	},

  "New Logger": {
		"prefix": "newlogger",
		"body": [
			"import { newLogger } from '@dbux/common/src/log/logger';",
      "",
      "// eslint-disable-next-line no-unused-vars",
      "const { log, debug, warn, error: logError } = newLogger('$1');",
		],
		"scope": "javascript,typescript"
	},

  "JSDoc: @type": {
    "prefix": "@type",
    "body": [
      "/**",
      " * @type {$1}",
      " */"
    ],
    "scope": "javascript,typescript"
  },
  "JSDoc: @type {number}": {
    "prefix": "@type_number",
    "body": [
      "/**",
      " * @type {number}",
      " */"
    ],
    "scope": "javascript,typescript"
  },
  // "JSDoc: single-line @type {number}": {
  // 	"prefix": "@type_single_line_number",
  // 	"body": [
  // 		"/** @type {number} */"
  // 	]
  // },
  "JSDoc: @param": {
    "prefix": "@param",
    "body": [
      "/**",
      " * @param {$1} $2",
      " */"
    ],
    "scope": "javascript,typescript"
  },
  "JSDoc: additional @param": {
    "prefix": "@param_add",
    "body": [
      "@param {$1} $2"
    ],
    "scope": "javascript,typescript"
  },
  "JSDoc: @return": {
    "prefix": "@return",
    "body": [
      "/**",
      " * @return {$1}",
      " */"
    ],
    "scope": "javascript,typescript"
  },
  "JSDoc: add @return": {
    "prefix": "@return_add",
    "body": [
      "@return {$1}"
    ],
    "scope": "javascript,typescript"
  },
  "eslint-disable-next-line no-unused-vars": {
    "prefix": "eslint-disable-next-line no-unused-vars",
    "body": [
      "// eslint-disable-next-line no-unused-vars"
    ],
    "scope": "javascript,typescript"
  },
  "JSDoc: @typedef-default": {
    "prefix": "@typedef-default",
    "body": [
      "/** @typedef {import('$1/$0').default} $0 */"
    ],
    "scope": "javascript,typescript"
  },
  "JSDoc: @typedef-named": {
    "prefix": "@typedef-named",
    "body": [
      "/** @typedef {import('$1').$0} $0 */"
    ],
    "scope": "javascript,typescript"
  }
}