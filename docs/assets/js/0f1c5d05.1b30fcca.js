/*! For license information please see 0f1c5d05.1b30fcca.js.LICENSE.txt */
(self.webpackChunkdbux_docs=self.webpackChunkdbux_docs||[]).push([[678],{9176:function(e,t,n){var a={"./async-send-file-await":8665,"./async-send-file-await.js":8665,"./async-send-file-cb":3638,"./async-send-file-cb.js":3638,"./async-send-file-promise":9407,"./async-send-file-promise.js":9407,"./async-sleep":3923,"./async-sleep.js":3923};function i(e){var t=r(e);return n(t)}function r(e){if(!n.o(a,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return a[e]}i.keys=function(){return Object.keys(a)},i.resolve=r,e.exports=i,i.id=9176},5002:function(e,t,n){"use strict";n.d(t,{Z:function(){return c}});var a=n(7462),i=n(3366),r=n(7294),o=n(3616),l=["toc","className","linkClassName","linkActiveClassName","minHeadingLevel","maxHeadingLevel"];function s(e){var t=e.toc,n=e.className,a=e.linkClassName,i=e.isChild;return t.length?r.createElement("ul",{className:i?void 0:n},t.map((function(e){return r.createElement("li",{key:e.id},r.createElement("a",{href:"#"+e.id,className:null!=a?a:void 0,dangerouslySetInnerHTML:{__html:e.value}}),r.createElement(s,{isChild:!0,toc:e.children,className:n,linkClassName:a}))}))):null}function c(e){var t=e.toc,n=e.className,c=void 0===n?"table-of-contents table-of-contents__left-border":n,p=e.linkClassName,m=void 0===p?"table-of-contents__link":p,d=e.linkActiveClassName,u=void 0===d?void 0:d,h=e.minHeadingLevel,f=e.maxHeadingLevel,k=(0,i.Z)(e,l),g=(0,o.LU)(),v=null!=h?h:g.tableOfContents.minHeadingLevel,y=null!=f?f:g.tableOfContents.maxHeadingLevel,N=(0,o.DA)({toc:t,minHeadingLevel:v,maxHeadingLevel:y}),C=(0,r.useMemo)((function(){if(m&&u)return{linkClassName:m,linkActiveClassName:u,minHeadingLevel:v,maxHeadingLevel:y}}),[m,u,v,y]);return(0,o.Si)(C),r.createElement(s,(0,a.Z)({toc:N,className:c,linkClassName:m},k))}},633:function(e,t,n){"use strict";n.d(t,{Z:function(){return h}});var a=n(7462),i=n(3366),r=n(7294),o=n(4184),l=n.n(o),s=n(7037),c=n.n(s),p=n(5350),m=n(8767);var d=["src","title","zoomable","darkLight","screen","concept","className","maxWidth","mb","style"];function u(e){return e.startsWith("/")||e.includes("://")}function h(e){var t=e.src,n=e.title,o=e.zoomable,s=e.darkLight,h=e.screen,f=e.concept,k=e.className,g=e.maxWidth,v=e.mb,y=e.style,N=(0,i.Z)(e,d);f&&(t.startsWith("concept")||u(t)||(t="concepts/"+t)),h&&(t.startsWith("screen")||u(t)||(t="screens/"+t));var C=f||h||o;C&&void 0===o&&(o=!0);var b=function(e){var t=e.src,n=e.darkLight,a=(0,p.Z)().isDarkTheme;return(0,m.Z)()+(n?a?"dark/":"light/":"")+t}({src:t,darkLight:s}),x=n=n||t;k=l()(k,{"border-screen":C,"img-crisp":C,zoomable:o});var w=r.createElement("img",(0,a.Z)({className:k,style:y,src:b,alt:x,title:n},N));if(g){g=c()(g)?g:g+"px",v=void 0===v?"mb-2":v;var T=l()(v),A={display:"inline-block",maxWidth:g,lineHeight:0};w=r.createElement("div",{className:T,style:A},w)}return w}},8640:function(e,t,n){"use strict";n.d(t,{Z:function(){return s}});var a=n(7294),i="tableOfContentsInline_0DDH",r=n(5002);var o=function(e){var t=e.toc,n=e.minHeadingLevel,o=e.maxHeadingLevel;return a.createElement("div",{className:i},a.createElement(r.Z,{toc:t,minHeadingLevel:n,maxHeadingLevel:o,className:"table-of-contents",linkClassName:null}))},l={display:"none"};function s(e){var t=e.toc;return a.createElement("div",{style:l},a.createElement(o,{toc:t}))}},1333:function(e,t,n){"use strict";n.d(t,{Z:function(){return p}});var a=n(7294),i=n(8767),r="acg",o="background/debugging",l={cgrs:"cgr","call graph root":"cgr","call graph roots":"cgr",aes:"ae","asynchronous event":"ae","asynchronous events":"ae","asynchronous call graph":"acg","race conditions":"race condition"},s={"call graph":"runtime-analysis/call-graph",acg:r,cgr:r,ae:r,"dynamic runtime analysis":o,idbe:o,"race condition":"https://www.google.com/search?q=race+condition&hl=en"},c={trace:"trace",statictrace:"trace",context:"context",staticcontext:"staticContext","call graph":"call-graph",acg:"",cgr:"cgr",ae:"ae","dynamic runtime analysis":"",idbe:""};function p(e){var t=e.term,n=e.children,r=void 0===n?t:n,o=function(e){var t=e.toLowerCase(),n=s[t=l[t]||t]||"advanced/terminology",a=c[t];return n||a?(a=a?"#"+a:"",""+(0,i.Z)()+n+a):null}(t);return o?a.createElement("a",{href:o,title:'lookup term: "'+t+'"'},r,a.createElement("sup",null,"\u2754")):a.createElement(a.Fragment,null,"$",r,a.createElement("span",{className:"color-gray border-gray round",title:'(could not look up "'+r+'")'},a.createElement("sup",null,"\u2753")))}},8767:function(e,t,n){"use strict";n.d(t,{Z:function(){return i}});var a=n(2263);function i(){return(0,a.Z)().siteConfig.baseUrl}},3388:function(e,t,n){"use strict";n.r(t),n.d(t,{contentTitle:function(){return N},default:function(){return w},frontMatter:function(){return y},metadata:function(){return C},toc:function(){return b}});var a=n(7462),i=n(3366),r=n(7294),o=n(3905),l=n(3899),s=n(4184),c=n.n(s),p=n(7037),m=n.n(p),d=["src","lang","minWidth","className","style","children"];function u(e){var t,a=e.src,o=e.lang,s=e.minWidth,p=e.className,u=e.style,h=e.children,f=(0,i.Z)(e,d);if(void 0===o&&(o="js"),f.className=c()(p,"code-block",((t={})["language-"+o]=!!o,t)),u||(u={}),s&&(s=m()(s)?s:s+"px",Object.assign(u,{minWidth:s})),a){var k=n(9176)("./"+a);k.default&&(k=k.default),h=h||"",h+=k}return m()(h)&&(h=h.trim()),r.createElement(l.Z,f,h)}function h(e){var t=e.space;return t?(t=m()(t)?t:t+"px",r.createElement("div",{style:{marginRight:t}})):r.createElement("div",{className:"mr-05"})}var f=n(1333),k=n(633),g=n(8640),v=["components"],y={sidebar_class_name:"sidebar-call-graph",slug:"/acg"},N="Asynchronous Call Graph",C={unversionedId:"runtime-analysis/asynchronous-call-graph",id:"runtime-analysis/asynchronous-call-graph",title:"Asynchronous Call Graph",description:'"Asynchronous Programming be like..."',source:"@site/content/runtime-analysis/20-asynchronous-call-graph.mdx",sourceDirName:"runtime-analysis",slug:"/acg",permalink:"/dbux/acg",editUrl:"https://github.com/Domiii/dbux/blob/master/docs/content/runtime-analysis/20-asynchronous-call-graph.mdx",tags:[],version:"current",sidebarPosition:20,frontMatter:{sidebar_class_name:"sidebar-call-graph",slug:"/acg"},sidebar:"tutorialSidebar",previous:{title:"Call Graph",permalink:"/dbux/runtime-analysis/call-graph"},next:{title:"Trace Details View",permalink:"/dbux/runtime-analysis/trace-details"}},b=[{value:"Examples",id:"examples",children:[{value:"Example1: sample program",id:"example1",children:[],level:3},{value:"Example2: todomvc",id:"example2",children:[],level:3}],level:2},{value:"What is the Asynchronous Call Graph (ACG)?",id:"what-is-the-asynchronous-call-graph-acg",children:[],level:2},{value:"Why?",id:"why",children:[],level:2},{value:"JavaScript Execution Semantics",id:"javascript-execution-semantics",children:[{value:"Call Graph Roots (CGR)",id:"cgr",children:[],level:3},{value:"Asynchronous Events (AE)",id:"ae",children:[],level:3},{value:"Execution Patterns: CHAINs vs. FORKs",id:"chain-fork",children:[{value:"The &quot;first CHAIN Problem&quot;",id:"the-first-chain-problem",children:[],level:4}],level:3},{value:"Promise Creation and Promise Nesting",id:"promise-nesting",children:[{value:"Example",id:"example",children:[],level:4}],level:3},{value:"More on Asynchronous Execution Semantics",id:"more-on-asynchronous-execution-semantics",children:[],level:3}],level:2}],x={toc:b};function w(e){var t=e.components,n=(0,i.Z)(e,v);return(0,o.kt)("wrapper",(0,a.Z)({},x,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"asynchronous-call-graph"},"Asynchronous Call Graph"),(0,o.kt)(g.Z,{toc:b,mdxType:"TOC"}),(0,o.kt)("hr",null),(0,o.kt)("a",{className:"flex flex-row flex-center-slim",href:"https://www.reddit.com/r/ProgrammerHumor/comments/rvco1a/asynchronous_proggraming_be_like/"},'"Asynchronous Programming be like..."',(0,o.kt)(h,{space:"4rem",mdxType:"HSpace"}),(0,o.kt)(k.Z,{maxWidth:"200px",title:"Asynchronous Programming is hard",src:"async-hard.gif",mdxType:"Img"})),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"examples"},"Examples"),(0,o.kt)("h3",{id:"example1"},"Example1: sample program"),(0,o.kt)("p",null,"This example demonstrates the ACG of a sample program:"),(0,o.kt)(k.Z,{screen:!0,src:"dbux-all-async1.png",mdxType:"Img"}),(0,o.kt)("p",null,"The ACG (right) renders the program ",(0,o.kt)(f.Z,{term:"CGRs",mdxType:"Term"})," and the ",(0,o.kt)("a",{parentName:"p",href:"#ae"},"asynchronous event edges"),' that connect them. The vertical axis is time (pointing downwards) and the horizontal dimension is a new experimental measure of "virtual threads" or "degree of concurrency".'),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Code: The red solid border around the ",(0,o.kt)("inlineCode",{parentName:"li"},"done()")," call expression indicates that it is ",(0,o.kt)("a",{parentName:"li",href:"/dbux/runtime-analysis/select-trace"},"selected"),"."),(0,o.kt)("li",{parentName:"ul"},"In the ACG, the ",(0,o.kt)("inlineCode",{parentName:"li"},"await Promise.all(...)")," node is also selected (due to ",(0,o.kt)("a",{parentName:"li",href:"/dbux/runtime-analysis/call-graph#follow"},"follow mode"),"), indicated by a yellow solid border.",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"\u2192"," This means that ",(0,o.kt)("inlineCode",{parentName:"li"},"done()"),' is in the CGR of that corresponding asynchronous continuation (or "virtual/resume context"). '),(0,o.kt)("li",{parentName:"ul"},"\u2192"," This also means that ",(0,o.kt)("inlineCode",{parentName:"li"},"done()"),"'s CGR executed after the awaited promise settled."))),(0,o.kt)("li",{parentName:"ul"},"The dashed (red) border around the nodes on the left (",(0,o.kt)("inlineCode",{parentName:"li"},"f1"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"sleep1s"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"f2"),') indicate that the selected node "',(0,o.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Synchronization_(computer_science)"},"synchronizes"),'" against them.',(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"\u2192"," Those CGRs are part of a promise that scheduled earlier but had to finish before this root could start executing."))),(0,o.kt)("li",{parentName:"ul"},"Other observations:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"f2")," will always follow ",(0,o.kt)("inlineCode",{parentName:"li"},"f1"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"g2")," will always follow ",(0,o.kt)("inlineCode",{parentName:"li"},"g1")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"h2")," follows ",(0,o.kt)("inlineCode",{parentName:"li"},"h1"),"."),(0,o.kt)("li",{parentName:"ul"},"The ACG also clearly shows that  ",(0,o.kt)("inlineCode",{parentName:"li"},"f"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"g")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"h")," are executing concurrently."),(0,o.kt)("li",{parentName:"ul"},"\u2192"," If someone wrote code requiring ",(0,o.kt)("inlineCode",{parentName:"li"},"h")," to always finish after ",(0,o.kt)("inlineCode",{parentName:"li"},"f"),", or ",(0,o.kt)("inlineCode",{parentName:"li"},"g")," after ",(0,o.kt)("inlineCode",{parentName:"li"},"h"),", there might be a ",(0,o.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Race_condition"},"race condition"),' because there is no such order assured in the code. That is why the ACG renders the three functions on separate "virtual threads" (vertical columns), illustrating that concurrency.')))),(0,o.kt)("h3",{id:"example2"},"Example2: todomvc"),(0,o.kt)("p",null,"This example demonstrates the ACG of ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/tastejs/todomvc/tree/master/examples/vanilla-es6"},"todomvc (vanilla-es6)"),":"),(0,o.kt)(k.Z,{screen:!0,src:"todomvc-sample-acg1.png",mdxType:"Img"}),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"In this example, ",(0,o.kt)("inlineCode",{parentName:"li"},"val")," (aka ",(0,o.kt)("a",{parentName:"li",href:"/dbux/runtime-analysis/call-graph#value"},"value mode"),") is enabled.",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"This option renders the value of the first execution of the currently selected trace in each ",(0,o.kt)(f.Z,{term:"CGR",mdxType:"Term"}),"."),(0,o.kt)("li",{parentName:"ul"},"In the ACG, we can see the value of ",(0,o.kt)("inlineCode",{parentName:"li"},"selector")," for each ",(0,o.kt)(f.Z,{term:"CGR",mdxType:"Term"}),", allowing us to see where/when the corresponding event (of this particular event handler) for each selector were handled."),(0,o.kt)("li",{parentName:"ul"},"We can click into each individual node to get us to the relevant execution of that event handler."))),(0,o.kt)("li",{parentName:"ul"},"NOTE: Event handler invocations of the same event are rendered in the same column.")),(0,o.kt)("h2",{id:"what-is-the-asynchronous-call-graph-acg"},"What is the Asynchronous Call Graph (ACG)?"),(0,o.kt)("p",null,"The Asynchronous Call Graph (ACG) is the ",(0,o.kt)("a",{parentName:"p",href:"/dbux/runtime-analysis/call-graph"},"call graph")," in ",(0,o.kt)("inlineCode",{parentName:"p"},"Async")," mode. You can see the ACG by opening the ",(0,o.kt)("a",{parentName:"p",href:"/dbux/runtime-analysis/call-graph"},"call graph")," and switching to ",(0,o.kt)("inlineCode",{parentName:"p"},"Async")," mode (by clicking the ",(0,o.kt)("inlineCode",{parentName:"p"},"Sync")," button in the ",(0,o.kt)("a",{parentName:"p",href:"/dbux/runtime-analysis/call-graph#toolbar"},"toolbar"),"). The two call graph modes share many features, including the toolbar buttons, coloring and more, as explained ",(0,o.kt)("a",{parentName:"p",href:"/dbux/runtime-analysis/call-graph#toolbar"},"here"),"."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Sync")," mode allows inspecting children and children of children of file and function executions. However, it simply puts ",(0,o.kt)(f.Z,{term:"call graph roots",mdxType:"Term"})," on a single linear vertical timeline. The ACG, on the other hand, uncovers the hidden connections between those roots on multiple vertical timelines and connections rendered between them.\nIn other words, ",(0,o.kt)("inlineCode",{parentName:"p"},"Sync")," mode is great for inspecting control flow ",(0,o.kt)("strong",{parentName:"p"},"within")," individual ",(0,o.kt)(f.Z,{term:"call graph roots",mdxType:"Term"}),", while ",(0,o.kt)("inlineCode",{parentName:"p"},"Async")," mode is great for inspecting control flow ",(0,o.kt)("strong",{parentName:"p"},"between")," them.\nIn many debugging scenarios, you probably want to toggle between the two modes, as you investigate the control flow of an application."),(0,o.kt)("h2",{id:"why"},"Why?"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous"},"Asynchronous JavaScript")," and its relatives, ",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Parallel_programming"},"parallel programming")," and ",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Concurrent_computing"},"concurrent computing"),", lead to much more complex execution pattern than their non-asynchronous, non-parallel, non-concurrent counterparts. In fact, asynchronous semantics are one of the most daunting aspects of JavaScript that software developers have to deal with on a day-to-day basis, making it ",(0,o.kt)("span",{className:"cursor-help highlight-on-hover",title:"This is a generic statement, so phrased for dramatic effect, not for accuracy."},"feared by many, underestimated by the rest",(0,o.kt)("sup",null,"*")),"."),(0,o.kt)("p",null,"With the ACG we hope to make asynchronous JavaScript a lot easier to understand and digest. It presents a clear picture of an application's asynchronous control flow, and makes many types of ",(0,o.kt)(f.Z,{term:"race conditions",mdxType:"Term"})," visually obvious. It can also help uncover lacking error propagation and a lot more. For example, if your application's ACG has many individual columns, but a low level of actual concurrency (things don't actually happen concurrently), it might indicate that you (i) forgot to ",(0,o.kt)("inlineCode",{parentName:"p"},"await")," or otherwise chain or nest your promises, or maybe (ii) are suffering from legacy code involving asynchronous callbacks and potential callback hell, that would benefit from re-writing using modern explicit asynchronous semantics."),(0,o.kt)("h2",{id:"javascript-execution-semantics"},"JavaScript Execution Semantics"),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"This section gets rather technical, as it goes deeper into JavaScript Execution Semantics, where we introduce relevant terminology as it pertains to JavaScript's asynchronous semantics and how it affects the ACG."))),(0,o.kt)("p",null,"Modern JavaScript engines are driven by a single-threaded event loop dispatching events from multiple queues",(0,o.kt)("sup",null,(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop"},"1"))," ",(0,o.kt)("sup",null,(0,o.kt)("a",{parentName:"p",href:"https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/"},"2")),". These queued events include all user-requested JavaScript events, such as the program's entry point, event handler callbacks and asynchronous continuations","."),(0,o.kt)("p",null,"JavaScript is non-preemptive and single-threaded, thereby guaranteeing that once dequeued, a script keeps executing until the call stack has no more user code on it, or until it interrupts itself with a root-level ",(0,o.kt)("inlineCode",{parentName:"p"},"await")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"yield"),", before another event is dequeued."),(0,o.kt)("p",null,"The ACG captures most asynchronous semantics of ",(0,o.kt)("a",{parentName:"p",href:"https://www.google.com/search?q=ES2022"},"ES2022"),", sans ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import#dynamic_imports"},"dynamic imports"),". Note that in order to be accurate, it requires Promises to adhere to the ",(0,o.kt)("a",{parentName:"p",href:"https://promisesaplus.com/"},"A+ specification"),", as modern browsers, Node and other JS engines do."),(0,o.kt)("h3",{id:"cgr"},"Call Graph Roots (CGR)"),(0,o.kt)("p",null,"Call Graph Roots (CGRs) are the ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"nodes"))," of the Asynchronous Call Graph (ACG)."),(0,o.kt)("p",null,"A CGR represents the invocation of a piece of code from outside our visible (recorded) runtime by the JavaScript engine. Most of the time that will be the first execution of a file or function on a stack that is empty or only contains frames that have not been recorded."),(0,o.kt)("p",null,"Examples of CGRs include:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The application's entry point."),(0,o.kt)("li",{parentName:"ul"},"A promise handler callback."),(0,o.kt)("li",{parentName:"ul"},"Continuation of an async function, after an ",(0,o.kt)("inlineCode",{parentName:"li"},"await")," expression. (NOTE: This is a type of CGR where the stack is not empty.)"),(0,o.kt)("li",{parentName:"ul"},"Asynchronous executions of a JavaScript file, e.g. when ",(0,o.kt)("inlineCode",{parentName:"li"},"require"),"d or ",(0,o.kt)("inlineCode",{parentName:"li"},"import"),"ed by ",(0,o.kt)("inlineCode",{parentName:"li"},"node")," or the webpack (or other) bundling system. (NOTE: Not all files are executed asynchronously.)"),(0,o.kt)("li",{parentName:"ul"},"Browser executing a ","<","script> tag."),(0,o.kt)("li",{parentName:"ul"},"Execution of a callback supplied to ",(0,o.kt)("inlineCode",{parentName:"li"},"setTimeout"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"setInterval"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"setIntermediate"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"Process.nextTick"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"Promise.then")," etc. These callbacks are scheduled and, at a later point in time, executed by the underlying JS runtime environment."),(0,o.kt)("li",{parentName:"ul"},"Event handler callbacks (e.g. DOM's ",(0,o.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener"},"addEventListener"),", Node's ",(0,o.kt)("a",{parentName:"li",href:"https://nodejs.org/docs/latest/api/fs.html#fswatchfilefilename-options-listener"},"fs.watchFile")," etc.).")),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"The ",(0,o.kt)("a",{parentName:"p",href:"/dbux/runtime-analysis/call-graph"},(0,o.kt)("inlineCode",{parentName:"a"},"synchronous")," call graph")," lists all CGRs on a linear timeline and allows inspecting individual children and subtrees of each root. The ACG, on the other hand, only shows CGRs (and none of their children), but further visualizes ",(0,o.kt)("a",{parentName:"p",href:"#chain-fork"},"their relationships"),"."))),(0,o.kt)("h3",{id:"ae"},"Asynchronous Events (AE)"),(0,o.kt)("p",null,"Asynchronous events (AEs) are the ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"edges"))," of the ACG, connecting CGRs. Any AE ",(0,o.kt)("inlineCode",{parentName:"p"},"e")," has at the following properties:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"scheduler")," - the event (",(0,o.kt)(f.Z,{term:"trace",mdxType:"Term"}),") that created it and its ",(0,o.kt)("a",{parentName:"li",href:"#cgr"},"CGR")," ",(0,o.kt)("inlineCode",{parentName:"li"},"fromRoot"),", and"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"toRoot")," - the ",(0,o.kt)("a",{parentName:"li",href:"#cgr"},"CGR")," that executes upon its completion.")),(0,o.kt)("p",null,"We define three types of asynchronous events in JavaScript:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"AWAIT")," ","- Scheduled by an ",(0,o.kt)("inlineCode",{parentName:"li"},"await")," expression. ",(0,o.kt)("inlineCode",{parentName:"li"},"toRoot(e)"),' is the root of the continuation\'s virtual context or "resume context/root".'),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"THEN")," ","- Scheduled by ",(0,o.kt)("inlineCode",{parentName:"li"},"q = p.THEN(f[, g])")," for some promise ",(0,o.kt)("inlineCode",{parentName:"li"},"p"),". For brevity, we use ",(0,o.kt)("inlineCode",{parentName:"li"},"THEN")," to represent ",(0,o.kt)("inlineCode",{parentName:"li"},"then"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"catch")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"finally"),". ",(0,o.kt)("inlineCode",{parentName:"li"},"toRoot(e)")," is that of ",(0,o.kt)("inlineCode",{parentName:"li"},"e"),"'s fulfillment or rejection handler, which we also call ",(0,o.kt)("inlineCode",{parentName:"li"},"thenCb"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"CB")," ","- Asynchronous callbacks scheduled by a call to an uninstrumented function which takes at least one argument ",(0,o.kt)("inlineCode",{parentName:"li"},"f")," of type ",(0,o.kt)("inlineCode",{parentName:"li"},"function"),".")),(0,o.kt)("p",null,"The following three implementations of a ",(0,o.kt)("inlineCode",{parentName:"p"},"send")," file function illustrate the three AE types. In all three cases, the resulting Asynchronous Call Graph (ACG) feature three nodes, connected by two edges:"),(0,o.kt)("div",{className:"flex flex-row flex-wrap"},(0,o.kt)(u,{className:"border-purple",lang:"js",src:"async-send-file-await.js",mdxType:"CodeBlock"}),(0,o.kt)(h,{mdxType:"HSpace"}),(0,o.kt)(u,{className:"border-purple",lang:"js",src:"async-send-file-promise.js",mdxType:"CodeBlock"}),(0,o.kt)(h,{mdxType:"HSpace"}),(0,o.kt)(u,{className:"border-purple",lang:"js",src:"async-send-file-cb.js",mdxType:"CodeBlock"})),(0,o.kt)("p",null,"Note that asynchronous events can either be one-shot (one-to-one: one ",(0,o.kt)("inlineCode",{parentName:"p"},"toRoot")," per ",(0,o.kt)("inlineCode",{parentName:"p"},"scheduler"),") or repeating (one-to-many: one ",(0,o.kt)("inlineCode",{parentName:"p"},"scheduler")," can have 0 or more ",(0,o.kt)("inlineCode",{parentName:"p"},"toRoot"),"s). ",(0,o.kt)("inlineCode",{parentName:"p"},"THEN")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"AWAIT")," type of events are always one-shot, while asynchronous callbacks can be executed multiple times, e.g. in case of ",(0,o.kt)("inlineCode",{parentName:"p"},"setInterval"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"addEventListener")," etc."),(0,o.kt)("h3",{id:"chain-fork"},"Execution Patterns: CHAINs vs. FORKs"),(0,o.kt)("p",null,"In order to capture and visualize degree of concurrency of JavaScript applications, the ACG further classifies ",(0,o.kt)(f.Z,{term:"AEs",mdxType:"Term"})," (i.e. the edges of the ",(0,o.kt)(f.Z,{term:"ACG",mdxType:"Term"}),") into CHAINs and FORKs.\nMaking that distinction is the same as asking: are the events of the ",(0,o.kt)("inlineCode",{parentName:"p"},"toRoot")," a logical continuation of the events of the ",(0,o.kt)("inlineCode",{parentName:"p"},"fromRoot")," (CHAIN)? Or are they the start of something new (FORK)?"),(0,o.kt)("p",null,"NOTE: CHAINs between AWAIT and THEN event roots propagate errors, while CBs have no automatic error propagation mechanism."),(0,o.kt)("p",null,"Below are several illustrations of asynchronous programs and their expected conceptual ACG with CHAINs (blue) and FORKs (purple):"),(0,o.kt)("div",{className:"flex flex-row w-full"},(0,o.kt)("div",{className:"flex-col w-half"},(0,o.kt)(k.Z,{concept:!0,src:"chain_fork_1.png",mdxType:"Img"}),(0,o.kt)(k.Z,{concept:!0,src:"chain_fork_3.png",mdxType:"Img"})),(0,o.kt)("div",{className:"flex-col w-half"},(0,o.kt)(k.Z,{concept:!0,src:"chain_fork_2.png",mdxType:"Img"}))),(0,o.kt)("h4",{id:"the-first-chain-problem"},'The "first CHAIN Problem"'),(0,o.kt)("p",null,"This example illustrates one of the difficulties involved in trying to determine CHAIN vs. FORK for the first ",(0,o.kt)("inlineCode",{parentName:"p"},"await")," in an async function (similar logic applies to the first ",(0,o.kt)("inlineCode",{parentName:"p"},"then")," in a promise chain):"),(0,o.kt)("div",{className:"border-purple mb-2"},(0,o.kt)("div",{className:"mb-05"},(0,o.kt)(u,{lang:"js",mdxType:"CodeBlock"},"\nasync function f() {\n  FA\n  await 0;  // E1\n  FB\n  await 0;  // E2\n  FC\n}\n  ")),(0,o.kt)("div",{className:"grid-2-col"},(0,o.kt)(u,{lang:"js",mdxType:"CodeBlock"},"\n// ex1: E1 is FORK\nA; f(); B;\n  "),(0,o.kt)(u,{lang:"js",mdxType:"CodeBlock"},"\n// ex2: E1 is CHAIN\nA; await f(); B;\n  "),(0,o.kt)(u,{lang:"js",mdxType:"CodeBlock"},"\n// ex3: E1 is FORK\nawait g();\nfunction g() { f(); }\n  "),(0,o.kt)(u,{lang:"js",mdxType:"CodeBlock"},"\n// ex4: E1 is CHAIN\nlet p; h(); await p;\nfunction h() { p = f(); }\n  "))),(0,o.kt)("p",null,"In the four examples above, ",(0,o.kt)("inlineCode",{parentName:"p"},"f")," has two AEs ",(0,o.kt)("inlineCode",{parentName:"p"},"E1")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"E2"),". ",(0,o.kt)("inlineCode",{parentName:"p"},"E2")," is always a CHAIN, but ",(0,o.kt)("inlineCode",{parentName:"p"},"E1")," might be CHAIN or FORK, depending on the caller. Assume that the example codes ex1-ex4 are all at root-level."),(0,o.kt)("h3",{id:"promise-nesting"},"Promise Creation and Promise Nesting"),(0,o.kt)("p",null,"Certain types of promises can be nested dynamically. Nested promises are always ",(0,o.kt)("a",{parentName:"p",href:"#chain-fork"},"chained"),"."),(0,o.kt)("p",null,"In JavaScript, promises can be created in five ways, some allow promise nesting:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"The Promise constructor takes an executor function which in turn is provided two parameters: the ",(0,o.kt)("inlineCode",{parentName:"li"},"resolve")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"reject"),' functions which are to be called to settle the promise. The executor function is called synchronously from the constructor. The Promise constructor is commonly used to wrap asynchronous callbacks into promises. This process is commonly referred to as "promisification".'),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"Promise.resolve(x)")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"Promise.reject(x)")," are equivalent to using the (i) Promise constructor and synchronously calling ",(0,o.kt)("inlineCode",{parentName:"li"},"resolve")," or ",(0,o.kt)("inlineCode",{parentName:"li"},"reject")," respectively. ",(0,o.kt)("inlineCode",{parentName:"li"},"Promise.all")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"Promise.race")," work similar to ",(0,o.kt)("inlineCode",{parentName:"li"},"resolve")," but allow nesting multiple promises. ",(0,o.kt)("inlineCode",{parentName:"li"},"Promise.all")," fulfills once all nested promises fulfill and rejects once any promise rejects. ",(0,o.kt)("inlineCode",{parentName:"li"},"Promise.race")," fulfills once any nested promise fulfills and rejects if any promise rejects before any other fulfills."),(0,o.kt)("li",{parentName:"ol"},"When an async function is called, the runtime environment creates a new promise. Its call expression value is set to that promise. Async functions execute synchronously until the first ",(0,o.kt)("inlineCode",{parentName:"li"},"await")," is encountered. This means that if an async function concluded without explicitly invoking an ",(0,o.kt)("inlineCode",{parentName:"li"},"await")," expression or any of the three other types of events, it does not trigger an asynchronous event. Await expressions can nest promises. Furthermore, promises can be nested by returning them from an async function."),(0,o.kt)("li",{parentName:"ol"},"Promise chaining (",(0,o.kt)("inlineCode",{parentName:"li"},"then"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"catch"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"finally"),") allows for promise nesting by returning a promise from their respective fulfillment and rejection handler callbacks."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import#Dynamic_Imports"},"Dynamic imports")," and other native functions create and return promises.",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"NOTE: The first dynamic import of a file can be seen as nesting top-level ",(0,o.kt)("inlineCode",{parentName:"li"},"awaits")," of the imported files, but the ",(0,o.kt)(f.Z,{term:"ACG",mdxType:"Term"})," does not yet capture asynchronous events related to dynamic imports.")))),(0,o.kt)("p",null,"Somewhat counter-intuitively, (1), (2) and (3) do ",(0,o.kt)("em",{parentName:"p"},"not")," cause an asynchronous event on their own.\nHowever, all of them can nest promises. Most of these nesting relationships are captured by Dbux's ",(0,o.kt)("a",{parentName:"p",href:"/dbux/runtime-analysis/call-graph#async"},"asynchronous call graph"),"."),(0,o.kt)("h4",{id:"example"},"Example"),(0,o.kt)("div",{className:"flex flex-row flex-center"},(0,o.kt)(u,{className:"border-screen",lang:"js",src:"async-sleep.js",mdxType:"CodeBlock"}),(0,o.kt)("div",{className:"font-size-3"},"\u2192"),(0,o.kt)("div",null,(0,o.kt)(k.Z,{screen:!0,src:"sample-async-sleep.png",mdxType:"Img"}))),(0,o.kt)("p",null,"Above example implements ",(0,o.kt)("inlineCode",{parentName:"p"},"sleep")," using ",(0,o.kt)("inlineCode",{parentName:"p"},"setTimeout"),". The Promise constructor itself ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"does not"))," trigger an ",(0,o.kt)("a",{parentName:"p",href:"#ae"},"asynchronous event")," but ",(0,o.kt)("inlineCode",{parentName:"p"},"setTimeout")," does. We thus only see one ACG node per call to ",(0,o.kt)("inlineCode",{parentName:"p"},"sleep"),"."),(0,o.kt)("h3",{id:"more-on-asynchronous-execution-semantics"},"More on Asynchronous Execution Semantics"),(0,o.kt)("p",null,"While there is a lot more to be said, for now, we plan to link relevant papers once they are published. Stay tuned (if you feel like it)."))}w.isMDXComponent=!0},4184:function(e,t){var n;!function(){"use strict";var a={}.hasOwnProperty;function i(){for(var e=[],t=0;t<arguments.length;t++){var n=arguments[t];if(n){var r=typeof n;if("string"===r||"number"===r)e.push(n);else if(Array.isArray(n)){if(n.length){var o=i.apply(null,n);o&&e.push(o)}}else if("object"===r)if(n.toString===Object.prototype.toString)for(var l in n)a.call(n,l)&&n[l]&&e.push(l);else e.push(n.toString())}}return e.join(" ")}e.exports?(i.default=i,e.exports=i):void 0===(n=function(){return i}.apply(t,[]))||(e.exports=n)}()},2705:function(e,t,n){var a=n(5639).Symbol;e.exports=a},4239:function(e,t,n){var a=n(2705),i=n(9607),r=n(2333),o=a?a.toStringTag:void 0;e.exports=function(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":o&&o in Object(e)?i(e):r(e)}},1957:function(e,t,n){var a="object"==typeof n.g&&n.g&&n.g.Object===Object&&n.g;e.exports=a},9607:function(e,t,n){var a=n(2705),i=Object.prototype,r=i.hasOwnProperty,o=i.toString,l=a?a.toStringTag:void 0;e.exports=function(e){var t=r.call(e,l),n=e[l];try{e[l]=void 0;var a=!0}catch(s){}var i=o.call(e);return a&&(t?e[l]=n:delete e[l]),i}},2333:function(e){var t=Object.prototype.toString;e.exports=function(e){return t.call(e)}},5639:function(e,t,n){var a=n(1957),i="object"==typeof self&&self&&self.Object===Object&&self,r=a||i||Function("return this")();e.exports=r},1469:function(e){var t=Array.isArray;e.exports=t},7005:function(e){e.exports=function(e){return null!=e&&"object"==typeof e}},7037:function(e,t,n){var a=n(4239),i=n(1469),r=n(7005);e.exports=function(e){return"string"==typeof e||!i(e)&&r(e)&&"[object String]"==a(e)}},8665:function(e,t,n){"use strict";n.r(t),t.default="async function send(fpath) {\r\n  const file = await openFile(fpath);\r\n\r\n  const cont = await readFile(file);\r\n\r\n\r\n  await sendFile(cont);\r\n\r\n\r\n  console.log('File sent!');\r\n}"},3638:function(e,t,n){"use strict";n.r(t),t.default="function send(fpath, cb) {\r\n  openFile(fpath, function (file) {\r\n\r\n    readFile(file, function (cont) {\r\n\r\n\r\n      sendFile(cont, function () {\r\n        cb && cb();\r\n\r\n        console.log('File sent!');\r\n      });\r\n    });\r\n  });\r\n}"},9407:function(e,t,n){"use strict";n.r(t),t.default="function send(fpath) {\r\n  return openFile(fpath).\r\n    then(function (file) {\r\n      return readFile(file);\r\n    }).\r\n    then(function (cont) {\r\n      return sendFile(cont);\r\n    }).\r\n    then(function () {\r\n      console.log('File sent!');\r\n    });\r\n}"},3923:function(e,t,n){"use strict";n.r(t),t.default="function sleep(ms) {\r\n  return new Promise((resolve) => setTimeout(resolve, ms));\r\n}\r\n\r\n(async function f() {\r\n  console.log(1);\r\n  await sleep(100);\r\n  console.log(2);\r\n  await sleep(200);\r\n  console.log(3);\r\n  await sleep(300);\r\n  console.log(4);\r\n})();"}}]);