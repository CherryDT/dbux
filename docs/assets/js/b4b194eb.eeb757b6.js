"use strict";(self.webpackChunkdbux_docs=self.webpackChunkdbux_docs||[]).push([[741],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var u=r.createContext({}),s=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,u=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=s(n),d=i,f=m["".concat(u,".").concat(d)]||m[d]||p[d]||a;return n?r.createElement(f,o(o({ref:t},c),{},{components:n})):r.createElement(f,o({ref:t},c))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=m;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var s=2;s<a;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3755:function(e,t,n){n.d(t,{Z:function(){return u}});var r=n(7462),i=n(3366),a=n(7294),o=n(9700),l=["path","children","title"];function u(e){var t=e.path,n=e.children,u=e.title,s=(0,i.Z)(e,l);if(!t)throw new Error('invalid <CodeLink /> missing "path". - props: '+JSON.stringify(e,null,2));var c=(0,o.B)(t);n=n||c,u=u||n;var p="https://github.com/Domiii/dbux/tree/master/"+t;return a.createElement("a",(0,r.Z)({title:u,href:p},s),n)}},9700:function(e,t,n){n.d(t,{B:function(){return i}});var r={"dbux-code":"Dbux VSCode Extension"};function i(e){var t=r[e];return t||(e.startsWith("dbux-")&&!e.startsWith("dbux-code")?"@dbux/"+e.substring(5):e)}},361:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return u},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return p},default:function(){return d}});var r=n(7462),i=n(3366),a=(n(7294),n(3905)),o=n(3755),l=["components"],u={},s="Performance",c={unversionedId:"guides/performance",id:"guides/performance",title:"Performance",description:"There are many performance considerations in tracing and recording all activity of a program.",source:"@site/content/guides/03-performance.mdx",sourceDirName:"guides",slug:"/guides/performance",permalink:"/dbux/guides/performance",editUrl:"https://github.com/Domiii/dbux/blob/master/docs/content/guides/03-performance.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Build Pipeline Integration",permalink:"/dbux/guides/build-pipeline-integration"},next:{title:"Tools and Configuration Overview",permalink:"/dbux/tools-and-configuration"}},p=[{value:"Comment",id:"comment",children:[],level:2}],m={toc:p};function d(e){var t=e.components,n=(0,i.Z)(e,l);return(0,a.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"performance"},"Performance"),(0,a.kt)("p",null,"There are many performance considerations in tracing and recording ",(0,a.kt)("em",{parentName:"p"},"all")," activity of a program."),(0,a.kt)("p",null,"Main considerations include:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Instrumentation can be slow.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"@dbux/cli")," uses ",(0,a.kt)("a",{parentName:"li",href:"https://babeljs.io/docs/en/babel-register"},(0,a.kt)("inlineCode",{parentName:"a"},"@babel/register"))," with custom caching. That caching currently has limited configuration, but we hope for more in the future."),(0,a.kt)("li",{parentName:"ul"},"If you use a bundler, make sure to configure caching for it."))),(0,a.kt)("li",{parentName:"ul"},"When executing ",(0,a.kt)("em",{parentName:"li"},"a lot of stuff")," (e.g. long loops or high FPS games etc), things will get slow",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"For example: Dbux probably won't really work at all if you run it on a 30+FPS game.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"In that case, we might want to be very strategic in telling Dbux to only record: (i) initialization, (ii) a select few other functions and then (iii) several frames of the gameloop for our analysis."))),(0,a.kt)("li",{parentName:"ul"},"Again, adaptive tracing is something we want to do in the future."))),(0,a.kt)("li",{parentName:"ul"},"When running a program with Dbux enabled, and also running it in debug mode in Node (i.e. ",(0,a.kt)("inlineCode",{parentName:"li"},"--inspect")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"--inspect-brk"),"), things slow down even worse. When things get too slow, you might want to consider using the ",(0,a.kt)("inlineCode",{parentName:"li"},"Run")," button instead of the ",(0,a.kt)("inlineCode",{parentName:"li"},"Debug")," button, and use the Dbux built-in features for debugging; unless there are some features in the traditional debugger that you just cannot live without in some specific circumstances."),(0,a.kt)("li",{parentName:"ul"},"Recording of large arrays and objects is limited, according to some (currently hardcoded) ",(0,a.kt)("inlineCode",{parentName:"li"},"SerializationLimits"),", to be found in ",(0,a.kt)(o.Z,{path:"dbux-runtime/src/data/valueCollection.js",mdxType:"CodeLink"}),".")),(0,a.kt)("p",null,'TODO: make this less messy; also link to "trace filters" and more relevant articles.'),(0,a.kt)("h2",{id:"comment"},"Comment"),(0,a.kt)("p",null,"Performance and scalability issues are often cited as the biggest problems for omniscient debuggers. However, as Henry Liebermann pointed out in reference to his omniscient debugger (called ZStep 95) in 1997",(0,a.kt)("sup",{parentName:"p",id:"fnref-1"},(0,a.kt)("a",{parentName:"sup",href:"#fn-1",className:"footnote-ref"},"1")),': "Even in an extremely large program, where keeping a complete history is infeasible, judicious testing can often isolate a fragement of the code which is not too large to run ZStep on. Nevertheless, we admit that there may be bugs that appear only after long runs involving large amounts of code, and so our techniques may be inappropriate in these cases. However, we conjecture that the  vast majority of bugs are relatively shallow, and the productivity improvements from finding".'),(0,a.kt)("p",null,"We believe, this applies to any omniscient debugger. While even large applications can be debugged with it, Dbux and its omniscient peers will falter when confronted with bugs in applications with high event frequency, such as games or complex algorithms running on a lot of data, if those bugs cannot be easily reproduced in a test case or short test run."),(0,a.kt)("p",null,"TODO: provide some numbers"))}d.isMDXComponent=!0}}]);