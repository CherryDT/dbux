"use strict";(self.webpackChunkdbux_docs=self.webpackChunkdbux_docs||[]).push([[284],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return m}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),u=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=u(a),m=r,h=c["".concat(s,".").concat(m)]||c[m]||d[m]||i;return a?n.createElement(h,l(l({ref:t},p),{},{components:a})):n.createElement(h,l({ref:t},p))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var u=2;u<i;u++)l[u]=a[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},3755:function(e,t,a){a.d(t,{Z:function(){return s}});var n=a(7462),r=a(3366),i=a(7294),l=["path","children","title"],o={"dbux-code":"Dbux VSCode Extension"};function s(e){var t=e.path,a=e.children,s=e.title,u=(0,r.Z)(e,l);if(!t)throw new Error('invalid <CodeLink /> missing "path". - props: '+JSON.stringify(e,null,2));var p=function(e){return o[e]||(e.startsWith("dbux-")&&!e.startsWith("dbux-code")?"@dbux/"+e.substring(5):e)}(t);a=a||p,s=s||a;var d="https://github.com/Domiii/dbux/tree/master/"+t;return i.createElement("a",(0,n.Z)({title:s,href:d},u),a)}},5225:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return s},contentTitle:function(){return u},metadata:function(){return p},toc:function(){return d},default:function(){return m}});var n=a(7462),r=a(3366),i=(a(7294),a(3905)),l=a(3755),o=["components"],s={},u="Known Limitations and Future Work",p={unversionedId:"advanced/future-work",id:"advanced/future-work",title:"Known Limitations and Future Work",description:"Other Syntax Limitations",source:"@site/content/04-advanced/02-future-work.mdx",sourceDirName:"04-advanced",slug:"/advanced/future-work",permalink:"/dbux/advanced/future-work",editUrl:"https://github.com/Domiii/dbux/blob/master/docs/content/04-advanced/02-future-work.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Performance",permalink:"/dbux/advanced/performance"},next:{title:"Contributing",permalink:"/dbux/advanced/contributing"}},d=[{value:"Other Syntax Limitations",id:"other-syntax-limitations",children:[],level:2},{value:"Problems with Values",id:"problems-with-values",children:[],level:2},{value:"Calling <code>process.exit</code> as well as uncaught exceptions are not always handled properly",id:"calling-processexit-as-well-as-uncaught-exceptions-are-not-always-handled-properly",children:[],level:2},{value:"Observer Effect",id:"observer-effect",children:[],level:2},{value:"<code>eval</code> and dynamically loaded code",id:"eval-and-dynamically-loaded-code",children:[],level:2},{value:"Function.prototype.toString and Function.name do not behave as expected",id:"functionprototypetostring-and-functionname-do-not-behave-as-expected",children:[],level:2},{value:"Issues on Windows",id:"issues-on-windows",children:[],level:2},{value:"SyntaxError: Unexpected reserved word &#39;XX&#39;",id:"syntaxerror-unexpected-reserved-word-xx",children:[],level:2},{value:"More Future Work",id:"more-future-work",children:[],level:2},{value:"More Ideas for the Future",id:"more-ideas-for-the-future",children:[],level:2}],c={toc:d};function m(e){var t=e.components,a=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"known-limitations-and-future-work"},"Known Limitations and Future Work"),(0,i.kt)("h2",{id:"other-syntax-limitations"},"Other Syntax Limitations"),(0,i.kt)("p",null,"The following JS syntax constructs are not supported at all or support is limited."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Generator functions",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Untested and not properly traced."))),(0,i.kt)("li",{parentName:"ul"},"Some es6 features are traced correctly, but data flow analysis is limited.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"We do not currently connect data flow through es6 deconstruction."),(0,i.kt)("li",{parentName:"ul"},"In verbose mode, ",(0,i.kt)("inlineCode",{parentName:"li"},"Dbux"),' raises some warnings tagged with "',(0,i.kt)("inlineCode",{parentName:"li"},"[NYI]"),'" to notify you of those missing connections.')))),(0,i.kt)("p",null,"NOTE: Most of these features still work fine, but some related information is not available and data flow analysis is interrupted."),(0,i.kt)("h2",{id:"problems-with-values"},"Problems with Values"),(0,i.kt)("p",null,"Because of ",(0,i.kt)("a",{parentName:"p",href:"./performance"},"performance")," reasons, we cannot record ",(0,i.kt)("em",{parentName:"p"},"everything"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Big objects, arrays and strings are truncated (see ",(0,i.kt)("a",{parentName:"li",href:"#performance"},"performance")," for more information)."),(0,i.kt)("li",{parentName:"ul"},"We currently do not properly trace all built-ins. Tracked in ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/Domiii/dbux/issues/543"},"https://github.com/Domiii/dbux/issues/543"),".")),(0,i.kt)("h2",{id:"calling-processexit-as-well-as-uncaught-exceptions-are-not-always-handled-properly"},"Calling ",(0,i.kt)("inlineCode",{parentName:"h2"},"process.exit")," as well as uncaught exceptions are not always handled properly"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'You might see a message along the lines of "',(0,i.kt)("inlineCode",{parentName:"li"},"Process shutdown but not all data has been sent out. Analysis will be incomplete. This is probably because of a crash or process.exit was called manually."),'"'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"process.exit")," and uncaught exceptions kill the process, even if not all recorded data has been sent out yet. As a result, not all runtime data could be recorded properly. That is why Dbux tries to stall upon process.exit and uncaught exceptions and also issues a warning.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"NOTE: some frameworks that kill your process by can be configured not to do so (e.g. for ",(0,i.kt)("inlineCode",{parentName:"li"},"Mocha")," you want to add the ",(0,i.kt)("inlineCode",{parentName:"li"},"--no-exit")," flag)."))),(0,i.kt)("li",{parentName:"ul"},"This was tracked in ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/Domiii/dbux/issues/201"},"#201"),".")),(0,i.kt)("h2",{id:"observer-effect"},"Observer Effect"),(0,i.kt)("p",null,"By trying to observe a program, while not intending to, you will inevitably change its behavior due to the ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Observer_effect_(physics)"},"observer effect"),". Here are a few examples:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Property getters with ",(0,i.kt)("a",{parentName:"li",href:"https://softwareengineering.stackexchange.com/questions/40297/what-is-a-side-effect"},"side effects")," will be called automatically by ",(0,i.kt)("inlineCode",{parentName:"li"},"Dbux")," (to get all that juicy runtime data) and potentially break things",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Dbux tracks data in real-time, by reading and recording variables, objects, arrays etc."),(0,i.kt)("li",{parentName:"ul"},"It also reads all (or at least many) properties of objects, thereby unwittingly causing property side-effects."),(0,i.kt)("li",{parentName:"ul"},"Examples:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"class A { count = 0; get x() { return ++this.count; } }; const a = new A();"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"When Dbux reads ",(0,i.kt)("inlineCode",{parentName:"li"},"x")," (when tracing the constructor call) it will unwittingly change ",(0,i.kt)("inlineCode",{parentName:"li"},"this.count"),"."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"const o = { get z() { console.log('z called'); return 42; } }"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"When Dbux reads ",(0,i.kt)("inlineCode",{parentName:"li"},"z"),', and you will see an unwanted "z called" in your console.'))))),(0,i.kt)("li",{parentName:"ul"},"The only way to prevent these bugs is (currently) by writing side-effect-free getters (in most cases, getters are supposed to be side-effect-free anyway)."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy"},"Proxies"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"As explained in the previous point, ","[@dbux/runtime]","(dbux-runtime] iterates over and collects values of object properties automatically in its quest for gathering runtime data."),(0,i.kt)("li",{parentName:"ul"},"As discussed ",(0,i.kt)("a",{parentName:"li",href:"https://stackoverflow.com/questions/36372611/how-to-test-if-an-object-is-a-proxy"},"here"),", ",(0,i.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy"},"Proxies")," are transparent by design; meaning there is no general way to determine if something is a proxy or not."),(0,i.kt)("li",{parentName:"ul"},"At the same time, Proxy property access, also very much by design, often has side effects."),(0,i.kt)("li",{parentName:"ul"},"-> This means that in many scenarios where Proxies (with side effects) are in play, you might just not be able to use Dbux properly.")))),(0,i.kt)("p",null,"You can completely disable tracing of any sensitive AST nodes by preceding them with a ",(0,i.kt)("inlineCode",{parentName:"p"},"/* dbux disable */")," comment. Tracked in issue ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Domiii/dbux/issues/209"},"#209"),"."),(0,i.kt)("h2",{id:"eval-and-dynamically-loaded-code"},(0,i.kt)("inlineCode",{parentName:"h2"},"eval")," and dynamically loaded code"),(0,i.kt)("p",null,"As a general rule of thumb - Any dynamically loaded code will currently not be traced. That is because we are not proactively scanning the application for code injections or outside code references."),(0,i.kt)("p",null,"This includes:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Calling ",(0,i.kt)("inlineCode",{parentName:"p"},"eval")," on non-instrumented code")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Any kind of ",(0,i.kt)("inlineCode",{parentName:"p"},"<script>")," tags containing or referencing non-instrumented code")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"If it is not generated dynamically: instrument that code beforehand.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"If the code is generated dynamically, Dbux cannot be of help right now, as we would have to ship and inject ",(0,i.kt)("inlineCode",{parentName:"p"},"@dbux/babel-plugin")," dynamically. While this is not impossible, it is not at all a priority to us. Contact us if you really need this to work."))),(0,i.kt)("h2",{id:"functionprototypetostring-and-functionname-do-not-behave-as-expected"},"Function.prototype.toString and Function.name do not behave as expected"),(0,i.kt)("p",null,"Because we instrument the function body, and sometimes even change the structure of functions, to allow better tracing their behavior, their ",(0,i.kt)("inlineCode",{parentName:"p"},"myFunc.toString()")," is not what you expect it to be. ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," on the other hand should always survive (or so we hope)."),(0,i.kt)("p",null,"This is only of concern to those who rely on serializing and deserializing functions, e.g. for sending functions of to run in a ",(0,i.kt)("inlineCode",{parentName:"p"},"webworker")," (",(0,i.kt)("a",{parentName:"p",href:"https://stackoverflow.com/questions/11354992/why-cant-web-worker-call-a-function-directly"},"related discussion here"),")."),(0,i.kt)("h2",{id:"issues-on-windows"},"Issues on Windows"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"A bug unrelated to Dbux occurs ",(0,i.kt)("strong",{parentName:"li"},"very rarely"),", when running things in VSCode's built-in terminal: it might change ",(0,i.kt)("inlineCode",{parentName:"li"},"require")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"import")," paths to lower- or upper-case drive letter.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"NOTE: Luckily, we have not seen this bug occur in quite some time."),(0,i.kt)("li",{parentName:"ul"},"The bug causes a mixture of lower-case and upper-case drive letters to start appearing in ",(0,i.kt)("inlineCode",{parentName:"li"},"require")," paths",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"=> this makes ",(0,i.kt)("inlineCode",{parentName:"li"},"babel")," unhappy (",(0,i.kt)("a",{parentName:"li",href:"https://github.com/webpack/webpack/issues/2815"},"github issue"),")"))),(0,i.kt)("li",{parentName:"ul"},"Official bug report: ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/microsoft/vscode/issues/9448"},"https://github.com/microsoft/vscode/issues/9448")),(0,i.kt)("li",{parentName:"ul"},"Workaround: Restart your computer (can help!), run command in external ",(0,i.kt)("inlineCode",{parentName:"li"},"cmd")," or find a better behaving shell/terminal.")))),(0,i.kt)("h2",{id:"syntaxerror-unexpected-reserved-word-xx"},"SyntaxError: Unexpected reserved word 'XX'"),(0,i.kt)("p",null,"Example: When just running ",(0,i.kt)("inlineCode",{parentName:"p"},"var public = 3;")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"node")," or the browser, you don't get an error. However when running the same code with ",(0,i.kt)("a",{parentName:"p",href:"../tools-and-configuration/dbux-cli"},"@dbux/cli")," (which is also invoked when pressing the ",(0,i.kt)("inlineCode",{parentName:"p"},"Dbux VSCode Extension"),'\'s "Run with Dbux" button), it throws a synxtax error.'),(0,i.kt)("p",null,"-> That is because it is interpreted as ",(0,i.kt)("inlineCode",{parentName:"p"},'"use strict"; var public = 3;'),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Why?",(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"public")," (and others) are reserved keywords and using reserved keywords is only an error in ",(0,i.kt)("strong",{parentName:"li"},"strict mode")," (",(0,i.kt)("a",{parentName:"li",href:"https://stackoverflow.com/questions/6458935/just-how-reserved-are-the-words-private-and-public-in-javascript"},"relevant discussion here"),")."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"../tools-and-configuration/dbux-cli"},"@dbux/cli")," uses ",(0,i.kt)("a",{parentName:"li",href:"https://babeljs.io/docs/en/babel-register"},"@babel/register")," with a bunch of default settings."),(0,i.kt)("li",{parentName:"ol"},"By default, ",(0,i.kt)("inlineCode",{parentName:"li"},"babel")," treats ",(0,i.kt)("inlineCode",{parentName:"li"},"*.js")," files as ",(0,i.kt)("a",{parentName:"li",href:"https://nodejs.org/api/esm.html"},"ESModules")," (or ",(0,i.kt)("inlineCode",{parentName:"li"},"esm"),"s), and ESModules have ",(0,i.kt)("inlineCode",{parentName:"li"},"strict mode")," enabled by default. This is also discussed here: ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/babel/babel/issues/7910"},"https://github.com/babel/babel/issues/7910"))))),(0,i.kt)("h2",{id:"more-future-work"},"More Future Work"),(0,i.kt)("p",null,"TODO: merge the following with all of the above"),(0,i.kt)("p",null,"This file serves to keep track of features that could prove very valuable for runtime analysis and debugging purposes.\nSo many things that can be done... So little time..."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Typescript support"),(0,i.kt)("li",{parentName:"ul"},"Remote capabilities",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"NOTE: ",(0,i.kt)("inlineCode",{parentName:"li"},"@dbux/runtime")," is currently hardcoded to connect to a ",(0,i.kt)("inlineCode",{parentName:"li"},"localhost")," server (see ",(0,i.kt)(l.Z,{path:"dbux-runtime\\src\\client\\Client.js",mdxType:"CodeLink"}),")."))),(0,i.kt)("li",{parentName:"ul"},"Properly test and provide recipes for all environments, e.g.:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Node's ",(0,i.kt)("inlineCode",{parentName:"li"},"vm")," (Jest uses that also)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"WebWorker")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"WebContainer")),(0,i.kt)("li",{parentName:"ul"},"more..."))),(0,i.kt)("li",{parentName:"ul"},"Advanced dynamic runtime adaptive recording, to reduce noise and improve performance.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Currently, a loop of 1 million iterations already stretches Dbux to its limits. We want to improve that."),(0,i.kt)("li",{parentName:"ul"},"Adaptive trace logging would be advantageous: ",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},'(i) only log traces that are "relevant", and (ii) allow user to easily select or change what is "relevant".'))))),(0,i.kt)("li",{parentName:"ul"},"Config file support for instrumentation + ",(0,i.kt)("inlineCode",{parentName:"li"},"runtime"),"."),(0,i.kt)("li",{parentName:"ul"},"Configurable stats display for ",(0,i.kt)("inlineCode",{parentName:"li"},"CallGraph")," stats (see ",(0,i.kt)("inlineCode",{parentName:"li"},"ContextNode._addStats"),")"),(0,i.kt)("li",{parentName:"ul"},"Proper ",(0,i.kt)("inlineCode",{parentName:"li"},"stats")," screen where one can easily analyze all kinds of program execution statistics"),(0,i.kt)("li",{parentName:"ul"},"More advanced search/filter analysis features, such as...",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"searching for arrays/objects that contain certain values"),(0,i.kt)("li",{parentName:"ul"},"searching/filtering of/by all (or subset of) ",(0,i.kt)("inlineCode",{parentName:"li"},"node_modules"),", package names"),(0,i.kt)("li",{parentName:"ul"},"enabling/disabling/grouping of/by modules/files etc. in call graph"),(0,i.kt)("li",{parentName:"ul"},"searching/filtering only system calls or sub-systems (e.g. all ",(0,i.kt)("inlineCode",{parentName:"li"},"HTTP")," calls)"),(0,i.kt)("li",{parentName:"ul"},"complex search queries (and, or, parentheses etc.)"))),(0,i.kt)("li",{parentName:"ul"},"Better loop comprehension (tracked in ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/Domiii/dbux/issues/222"},"#222"),")."),(0,i.kt)("li",{parentName:"ul"},"Advanced analysis of code along the dependency tree(s)"),(0,i.kt)("li",{parentName:"ul"},"Support web-based VSCode ",(0,i.kt)("a",{parentName:"li",href:"https://vscode.dev/"},"https://vscode.dev/")),(0,i.kt)("li",{parentName:"ul"},"Support ",(0,i.kt)("a",{parentName:"li",href:"https://yarnpkg.com/features/pnp"},"Yarn PnP")," - considerations include:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/yarnpkg/berry/issues/558"},"Using Traditional Debugger with PNP"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"NOTE: file paths could look a little like this: ",(0,i.kt)("inlineCode",{parentName:"li"},"repo/.yarn/virtual/webpack-dev-server-virtual-98c281437e/0/cache/webpack-dev-server-npm-3.9.0-e9c2d8aa12.zip/node_modules/webpack-dev-server/bin/webpack-dev-server.js")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/yarnpkg/berry/issues/638"},"ESM Support"))))))),(0,i.kt)("h2",{id:"more-ideas-for-the-future"},"More Ideas for the Future"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"advanced ",(0,i.kt)("strong",{parentName:"li"},"context-sensitive")," keymap support to expand/collapse/click all buttons (e.g. similar to ",(0,i.kt)("a",{parentName:"li",href:"https://www.google.com/search?q=aoe4+grid+keys"},'AOE4\'s "grid keys"'),")",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"provide a single ",(0,i.kt)("inlineCode",{parentName:"li"},"Toggle Dbux Keymap")," shortcut/command. When enabled:"),(0,i.kt)("li",{parentName:"ul"},"show relevant shortcut key next to each button (if possible?)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"vscode.commands.executeCommand('setContext', 'dbux.keyboardMode.enabled', true);"))),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-jsonc"},'{ "keybindings": [\n  {\n    "command": "dbux.selectTrace",\n    "key": "q",\n    "when": "dbux.keyboardMode.enabled"\n  },\n  // ...\n  { \n    // this command toggle expands/collapses the first "expandable" button of TraceDetails (usually `Value`)\n    "command": "dbux.traceDetails.btns.toggle.first"\n    // ...\n  },\n  // ...\n  { \n    // this command clicks the first "meaningfully clickable" button of TraceDetails (which is the first navigation button?)\n    "command": "dbux.traceDetails.btns.click.first"\n    // ...\n  }\n]}\n')))))}m.isMDXComponent=!0}}]);