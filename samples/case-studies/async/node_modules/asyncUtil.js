exports.sleep = async function sleep(delay) {
  return new Promise(r => setTimeout(r, delay));
}

exports.sleepImmediate = async function sleepImmediate(times) {
  let resolve;
  function next() {
    if (--times >= 0) {
      setImmediate(next)
    }
    else {
      return resolve();
    }
  }
  return new Promise(r => { resolve = r; next(); });
}

const N = 14
exports.N = N;

exports.repeatNPromise = function repeatNPromise(task) {
  let n = N;
  function next() {
    if (--n >= 0) {
      return/*  Promise.resolve( */task()/* ) */.
        then(next);
    }
    else {
      return;
    }
  }
  return next();
}

exports.repeatNAsync = async function repeatNAsync(cb) {
  for (let i = 0; i < N; ++i) {
    await cb();
  }
}

exports.testRandom = function testRandom() {
  for (let i = 0; i < 10; ++i) {
    console.log(Math.random())
  }
}