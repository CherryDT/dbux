import noop from 'lodash/noop';

import seedrandom from 'seedrandom';
seedrandom('dbux', { global: true });

/** ###########################################################################
 * Common
 *  #########################################################################*/

/**
 * Randomly generate integer in {0, 1, ..., n - 1}
 */
export function randomInt(n) {
  return Math.floor(Math.random() * n);
}

function normalizeCondition(condition) {
  if (!(condition instanceof Function)) {
    var n = condition;
    // console.trace('normalizeCondition', condition);
    condition = () => {
      const oldN = n;
      n = Math.max(n - 1, 0);
      // console.log('norm cond', oldN);
      return !!oldN;
    };
  }
  return condition;
}

export function sleep(ms) {
  return new Promise(r => setTimeout(r, ms));
}

function waitTick() {
  // return sleep(0);
}

/** ###########################################################################
 * Async
 *  #########################################################################*/

export async function waitTicksAsync(t) {
  await repeatAsync(t)
}

export async function repeatAsync(condition, nextTick = waitTick) {
  condition = normalizeCondition(condition);
  while (condition()) {
    await nextTick();
  }
}

/** ###########################################################################
 * Promise
 *  #########################################################################*/

export function waitTicksPromise(t) {
  return repeatPromise(t);
}

export function repeatPromise(condition, _nextTick = waitTick) {
  condition = normalizeCondition(condition);
  return _repeatPromise(condition, _nextTick);
}

function _repeatPromise(condition, tickHandler) {
  let p = Promise.resolve();
  if (condition()) {
    return p
      .then(tickHandler)
      .then(function nextTick() {
        return _repeatPromise(condition, tickHandler);
      });
  }
  return p;
}

export function pt(cb) {
  return Promise.resolve().then(cb);
}