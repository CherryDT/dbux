// const seedrandom = require('seedrandom');
// seedrandom('dbux', { global: true });

const { sleepN, randomInt } = require('./asyncUtil');


// ###########################################################################
//  States & Constants
// ###########################################################################

const N = 10;

const ProducerTime = 2;
const ProducerTimeVar = 1;
const ConsumerTime = 2;
const ConsumerTimeVar = 1;
const IdleTime = 1;

const MaxItems = 5;
const buffer = [];

let nItems = 0;

let consuming = 0;
let producing = 0;

let lastItem = 0;

exports.N = N;

// ###########################################################################
//  Common
// ###########################################################################

exports.idle = function idle() {
  return sleepN(IdleTime);
}

// ###########################################################################
//  Producer
// ###########################################################################

exports.hasSpace = function hasSpace() {
  return (producing + nItems) < MaxItems;
}

exports.produce = async function produce() {
  ++producing;
  console.log(`producing item ${lastItem + producing}...`);

  await sleepN((ProducerTime - ProducerTimeVar) + randomInt(ProducerTimeVar * 2 + 1));

  const item = ++lastItem;
  buffer.push(item);
  ++nItems;
  --producing;

  console.log(`produced item ${item}, ${nItems} (-${consuming}) left`);
}

// ###########################################################################
//  Consumer
// ###########################################################################

exports.hasItems = function hasItems() {
  return nItems - consuming > 0;
}

exports.consume = async function consume() {
  ++consuming;
  console.log(`consuming item ${buffer[consuming - 1]}...`);
  await sleepN((ConsumerTime - ConsumerTimeVar) + randomInt(2 * ConsumerTimeVar + 1));

  const item = buffer.shift();
  --nItems;
  --consuming;

  console.log(`consumed item ${item}, ${nItems} (-${consuming}) left`);
}