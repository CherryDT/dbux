import Index from './Index';
import { newLogger } from 'dbux-common/src/log/logger';

export default class Collection {
  name;
  dp;
  indexes = [];
  _byIndex = {};
  _all = [null];

  constructor(name, dp) {
    this.log = newLogger(`${name} (Col)`);
    this.name = name;
    this.dp = dp;
  }

  // ###########################################################################
  // Writes
  // ###########################################################################

  addIndex(name, keygen) {
    this.indexes.push(new Index(
      name,
      keygen
    ));
  }

  add(entries) {
    this._all.push(...entries);
  }

  /**
   * Will be called after all entries have been added, and before event listeners are notified.
   */
  processNewEntries(entries) {
    // process indexes
    for (const index of this.indexes) {
      const { name, keygen } = index;
      const byKey = (this._byIndex[name] = this._byIndex[name] || {});
      for (const entry of entries) {
        const key = keygen(this.dp, entry);
        if (key === undefined) {
          this.log.warn(`key generated by index ${name} is undefined`);
        }
        byKey[key] = entry;
      }
    }
  }

  // ###########################################################################
  // Reads
  // ###########################################################################

  getAll() {
    return this._all;
  }

  getById(id) {
    return this._all[id];
  }
}